{"version":3,"sources":["components/MapChart.js","components/Main.js","components/Loading.js","components/Error.js","constants.js","utils.js","App.js","customHooks.js","reportWebVitals.js","index.js"],"names":["MapChart","datasets","console","log","style","width","projection","projectionConfig","rotate","scale","geography","geodata","geographies","map","geo","amount","plane","properties","ISO_A2","Object","values","reduce","acc","v","fill","stroke","rsmKey","from","to","strokeWidth","strokeLinecap","Main","height","overflow","Loading","Error","DATASETS","train2020","planes","train","formatData","dataset","content","header","data","meta","origin","indexOf","destination","formated","filter","x","includes","year","parseVal","isNaN","Number","keys","forEach","yearIdx","row","undefined","formatDataSets","find","ds","trainBig","mergeDatasets","App","useState","setData","error","setError","format","useCallback","handleError","err","useEffect","promises","fetch","then","response","text","a","parse","parsed","res","name","catch","Promise","all","errors","length","setTimeout","useDatasets","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb9b870f.chunk.js","sourcesContent":["import React from \"react\";\nimport { ComposableMap, Geographies, Geography, Line } from \"react-simple-maps\";\nimport geodata from \"../geo.json\";\n\nconst MapChart = ({ datasets }) => {\n  console.log(datasets);\n  return (\n    <div style={{ width: \"100vw\" }}>\n      <ComposableMap\n        projection=\"geoAzimuthalEqualArea\"\n        projectionConfig={{\n          rotate: [-20.0, -40.0, 0],\n          scale: 500,\n        }}\n      >\n        <Geographies geography={geodata}>\n          {({ geographies }) =>\n            geographies.map((geo) => {\n              const p = datasets.plane[2015][geo.properties.ISO_A2];\n              const amount =  p ? Object.values(\n                  datasets.plane[2014][geo.properties.ISO_A2]\n                ).reduce((acc, v) => acc + v || 0, 0) : 0;\n\n              \n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={amount && amount > 10000 ? \"#9998A3\" : \"#EAEAEC\"}\n                  stroke=\"#EAEAEC\"\n                />\n              );\n            })\n          }\n        </Geographies>\n        <Line\n          from={[40.0457, 50.7128]}\n          to={[19.3499, 48.0703]}\n          stroke=\"#FF5533\"\n          strokeWidth={2}\n          strokeLinecap=\"round\"\n        />\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default MapChart;\n","import MapChart from \"./MapChart\";\n\nconst Main = ({ datasets }) => {\n  return (\n    <div style={{ height: \"100vh\", overflow: \"hidden\" }}>\n      <MapChart datasets={datasets} />\n    </div>\n  );\n};\n\nexport default Main;\n","const Loading = () => {\n  return(\n    <h2>eurotransit</h2>\n  )\n}\n\nexport default Loading;\n","const Error = () => {\n  return (\n    <div>\n      <h2>eurotransit</h2>\n      <p>[eurotransit is not available right now. Please try again later]</p>\n    </div>\n  );\n};\n\nexport default Error;\n","export const BASE_URL =\n  \"https://raw.githubusercontent.com/dvcarrillo/eurotransit/dev/datasets/\";\n\nexport const DATASETS = {\n  train2020: \"rail_passengers_2020_cleaned.csv\",\n  planes: \"cleaned_planes.csv\",\n  train: \"rail_trips_cleaned.csv\",\n  // \"country_codes.csv\",\n};\n","import { DATASETS } from \"./constants\";\n\nexport const formatData = (dataset) => {\n  const [header, ...data] = dataset.content;\n  const meta = [\"origin\", \"destination\"];\n\n  // Locate origin and destination columns;\n  const origin = header.indexOf(meta[0]);\n  const destination = header.indexOf(meta[1]);\n\n  // Locate years\n  const years = header.filter((x) => !meta.includes(x));\n\n  // Create object with the available years;\n  const formated = years.reduce((acc, year) => {\n    acc[year] = {};\n    return acc;\n  }, {});\n\n  const parseVal = (v) => (isNaN(Number(v)) ? null : Number(v));\n\n  // Fill object;\n  Object.keys(formated).forEach((year) => {\n    const yearIdx = header.indexOf(year);\n\n    data.forEach((row) => {\n      if (row[destination] === undefined) return; // weird error in a ds;\n\n      if (row[origin] in formated[year]) {\n        formated[year][row[origin]][row[destination]] = parseVal(row[yearIdx]);\n      } else {\n        formated[year][row[origin]] = {\n          [row[destination]]: parseVal(row[yearIdx]),\n        };\n      }\n    });\n  });\n\n  return {\n    content: formated,\n    dataset: dataset.dataset,\n  };\n};\n\nexport const mergeDatasets = (datasets) => {\n  const planes = datasets.find((ds) => ds.dataset === DATASETS.planes);\n  const trainBig = datasets.find((ds) => ds.dataset === DATASETS.train);\n  const train2020 = datasets.find((ds) => ds.dataset === DATASETS.train2020);\n\n  return {\n    plane: planes.content,\n    train: { ...trainBig.content, ...train2020.content },\n  };\n};\n\nexport const formatDataSets = (datasets) => {\n  const formated = datasets.map(formatData);\n  const merged = mergeDatasets(formated);\n  return merged;\n};","import React from \"react\";\n\nimport Main from \"./components/Main\";\nimport Loading from \"./components/Loading\";\nimport Error from \"./components/Error\";\n\nimport { useDatasets } from './customHooks';\n\nimport \"./App.css\";\n\nfunction App() {\n  const [data, error] = useDatasets();\n\n  return (\n    <div className=\"App\">\n      {error ? <Error /> : data ? <Main datasets={data} /> : <Loading />}\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { parse } from \"papaparse\";\n\nimport { BASE_URL, DATASETS } from \"./constants\";\nimport { formatDataSets } from \"./utils\";\n\nexport const useDatasets = () => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const format = useCallback((ds) => formatDataSets(ds), []);\n\n  const handleError = (err) => {\n    setError(err);\n    console.error('Error retrieving the data:', err);\n  };\n\n  useEffect(() => {\n    const promises = Object.values(DATASETS).map((dataset) =>\n      fetch(BASE_URL + dataset)\n        .then((response) => response.text())\n        .then( async (v) => {\n          const parsed = await parse(v);\n          return {\n            res: parsed,\n            name: dataset,\n          }\n        })\n        .catch(handleError)\n    );\n\n    Promise.all(promises)\n      .then((res) => {\n        const errors = res.filter((x) => x.res.errors.length > 0);\n        const isError = errors.length > 0;\n\n        if (isError) {\n          handleError(errors);\n        } else {\n          const data = res.map((x) => ({\n            content: x.res.data,\n            dataset: x.name,\n          }));\n          setTimeout(() => {\n            const formated = format(data);\n            setData(formated);\n          }, 1500);\n        }\n      })\n      .catch(handleError);\n  }, [format]);\n\n  return [data, error];\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}