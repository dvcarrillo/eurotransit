{"version":3,"sources":["components/Navbar.jsx","components/DoughnutChart.jsx","constants.js","components/StackedBarChart.jsx","components/Sidebar.jsx","components/Header.jsx","components/MapChart.jsx","components/MapTooltip.jsx","components/SidebarContainer.jsx","hooks/useDatasetLimits.jsx","components/Main.jsx","components/Loading.jsx","components/Error.jsx","utils.js","hooks/useDatasets.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Navbar","options","selected","setSelected","setClass","position","useCallback","method","className","map","opt","value","onClick","label","DoughnutChart","countries","filteredCountries","Object","keys","data","filter","x","colors","chroma","scale","mode","length","labels","datasets","geo","properties","NAME","values","backgroundColor","borderColor","borderWidth","legend","display","DATASETS","train2020","planes","train","TRANSPORT_OPTS","YEAR_OPTS","Array","from","_","i","year","StackedBarChart","dataset","countryCode","country","idx","years","forEach","push","scales","yAxes","stacked","ticks","beginAtZero","xAxes","Sidebar","transport","countryInfo","ISO","imgUrl","alt","src","POP_EST","toFixed","Header","MapChart","selectedCountries","setHoveredCountry","getCentroid","sum","reduce","acc","coord","y","data-tip","projection","projectionConfig","rotate","geography","geodata","geographies","amount","ISO_A2","v","stroke","onMouseEnter","onMouseLeave","style","default","fill","opacity","outline","hover","pressed","rsmKey","find","c","isSelected","target","g","coords","geometry","coordinates","to","strokeWidth","strokeLinecap","MapTooltip","name","total","population","passengers","tootipContent","SidebarContainer","open","onClose","sidebarContent","mainContent","useState","opened","setOpened","useEffect","useDatasetsLimits","useMemo","max","Infinity","min","val","Math","Main","setYear","setSelectedCountries","hoveredCountry","setTransport","domain","Loading","Error","formatData","content","header","meta","origin","indexOf","destination","formated","includes","parseVal","isNaN","Number","yearIdx","row","undefined","formatDataSets","ds","trainBig","plane","mergeDatasets","useDatasets","setData","error","setError","format","handleError","err","console","promises","fetch","then","response","text","a","parse","parsed","res","catch","Promise","all","errors","setTimeout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d059f34.chunk.js","sourcesContent":["import { useCallback } from \"react\";\n\nconst Navbar = ({ options, selected, setSelected, position }) => {\n  const setClass = useCallback(\n    (method) => {\n      return selected === method ? \"tab-active\" : \"tab-btn\";\n    },\n    [selected]\n  );\n\n  return (\n    <div className=\"tab\">\n      {options.map((opt) => (\n        <button\n          key={opt.value}\n          className={setClass(opt.value)}\n          onClick={() => setSelected(opt.value)}\n        >\n          {opt.label}\n        </button>\n      ))}\n      {/* <button className=\"tab-btn\">About</button> */}\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { Doughnut } from \"react-chartjs-2\";\nimport chroma from \"chroma-js\";\n\nconst DoughnutChart = ({ countries }) => {\n\n  const filteredCountries = Object.keys(countries[0].data).filter(\n    (x) => countries[0].data[x]\n  );\n\n  const colors = chroma\n  .scale([\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(75, 192, 192)\"])\n  .mode(\"lch\")\n  .colors(filteredCountries.length);\n\n  const data = {\n    labels: filteredCountries,\n    datasets: [\n      {\n        label: `Outgoing passengers from ${countries[0].geo.properties.NAME}`,\n        data: Object.values(countries[0].data).filter((x) => x),\n        backgroundColor: colors,\n        borderColor: colors,\n        borderWidth: 1,\n      },\n    ],\n  };\n  const options = {\n    legend: { display: false },\n  };\n\n  return <Doughnut options={options} data={data} />;\n};\n\nexport default DoughnutChart;\n","export const BASE_URL =\n  \"https://raw.githubusercontent.com/dvcarrillo/eurotransit/dev/datasets/\";\n\nexport const DATASETS = {\n  train2020: \"rail_passengers_2020_cleaned.csv\",\n  planes: \"cleaned_planes.csv\",\n  train: \"rail_trips_cleaned.csv\",\n  // \"country_codes.csv\",\n};\n\nexport const TRANSPORT_OPTS = [\n  { value: \"plane\", label: \"Flight\" },\n  { value: \"train\", label: \"Train\" },\n];\n\nexport const YEAR_OPTS = Array.from(\n  { length: 2020 - 2004 + 1 },\n  (_, i) => 2004 + i\n).map((year) => ({\n  value: year,\n  label: year,\n}));\n","import chroma from \"chroma-js\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport { YEAR_OPTS } from \"../constants\";\n\nconst StackedBarChart = ({ dataset, countryCode }) => {\n  const countries = Object.keys(dataset[YEAR_OPTS[0].value]);\n  const colors = chroma\n    .scale([\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(75, 192, 192)\"])\n    .mode(\"lch\")\n    .colors(countries.length);\n\n  const datasets = countries.map((country, idx) => {\n    const years = [];\n\n    YEAR_OPTS.forEach(({ value }) => {\n      years.push(dataset[value][countryCode][country]);\n    });\n\n    return {\n      label: country,\n      data: years,\n      backgroundColor: colors[idx],\n    }\n  });\n\n  const data = {\n    labels: YEAR_OPTS.map((year) => year.value),\n    datasets: datasets\n  };\n\n  const options = {\n    legend: { display: false },\n    scales: {\n      yAxes: [\n        {\n          stacked: true,\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n      xAxes: [\n        {\n          stacked: true,\n        },\n      ],\n    },\n  };\n  \n  return <Bar options={options} data={data} />;\n};\n\nexport default StackedBarChart;\n","import chroma from \"chroma-js\";\n\nimport DoughnutChart from \"./DoughnutChart\";\nimport StackedBarChart from \"./StackedBarChart\";\n\nconst Sidebar = ({ countries, transport, year, dataset }) => {\n  const countryInfo = countries[0]?.geo.properties;\n  const countryCode = countries[0]?.ISO;\n  const imgUrl = `https://www.countryflags.io/${countryCode}/flat/64.png`;\n  return (\n    <div className=\"sidebar\">\n      <img alt={countryInfo.NAME} src={imgUrl}></img>\n      <h2>{countries[0]?.geo.properties.NAME}</h2>\n      <div>\n        <p>\n          Population: <b>{(countryInfo.POP_EST / 1000000).toFixed(2)}M</b>\n        </p>\n        <p>\n          Passengers per 1M population: <b>N/A</b>\n        </p>\n      </div>\n      <div>\n        <h5>Outgoing passengers from {countryInfo.NAME}</h5>\n        <DoughnutChart countries={countries} />\n      </div>\n      <div>\n        <h5>Outgoing passengers by year</h5>\n        <StackedBarChart dataset={dataset} countryCode={countryCode} />\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","const Header = () => {\n  return (\n    <div className=\"header\">\n      Passengers per year in the EU by type of transportation\n    </div>\n  );\n};\n\nexport default Header;\n","import {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Line,\n} from \"react-simple-maps\";\nimport geodata from \"../geo.json\";\n\nconst MapChart = ({\n  dataset,\n  scale,\n  selectedCountries,\n  setHoveredCountry,\n  setSelected,\n}) => {\n  const getAcc = (data) => {\n    const amount = data\n      ? Object.values(data).reduce((acc, v) => acc + v || 0, 0)\n      : 0;\n    return amount;\n  };\n\n  const isSelected = (geo) =>\n    selectedCountries?.find((c) => c.ISO === geo.properties.ISO_A2);\n\n  const getCentroid = (data) => {\n    if (!data) return [0, 0];\n    const sum = data.reduce(\n      (acc, coord) => {\n        acc.x += coord[0];\n        acc.y += coord[1];\n        return acc;\n      },\n      { x: 0, y: 0 }\n    );\n    return [sum.x / data.length, sum.y / data.length];\n  };\n\n  return (\n    <div className=\"map-chart\">\n      <ComposableMap\n        data-tip=\"\"\n        projection=\"geoAzimuthalEqualArea\"\n        projectionConfig={{\n          rotate: [-15.0, -30.0, 0],\n          scale: 500,\n        }}\n      >\n        <ZoomableGroup>\n          <Geographies geography={geodata}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const amount = getAcc(dataset[geo.properties.ISO_A2]);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    stroke=\"#EAEAEC\"\n                    onClick={() => {\n                      setSelected([\n                        {\n                          geo,\n                          ISO: geo.properties.ISO_A2,\n                          data: dataset[geo.properties.ISO_A2],\n                        },\n                      ]);\n                    }}\n                    onMouseEnter={() => {\n                      setHoveredCountry({\n                        geo,\n                        ISO: geo.properties.ISO_A2,\n                        data: dataset[geo.properties.ISO_A2],\n                      });\n                    }}\n                    onMouseLeave={() => {\n                      setHoveredCountry(null);\n                    }}\n                    style={{\n                      default: {\n                        fill: dataset[geo.properties.ISO_A2]\n                          ? scale(amount)\n                          : \"black\",\n                        opacity: 1,\n                        outline: \"none\",\n                      },\n                      hover: {\n                        fill: \"#0e755d\",\n                        outline: \"none\",\n                      },\n                      pressed: {\n                        fill: \"#E42\",\n                        outline: \"none\",\n                      },\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n          <Geographies geography={geodata}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  isSelected(geo) &&\n                  selectedCountries.map((country) => {\n                    return Object.keys(country.data)\n                      .filter((x) => country.data[x])\n                      .map((target) => {\n                        const country = geographies.find(\n                          (g) => g.properties.ISO_A2 === target\n                        );\n                        const coords = country?.geometry.coordinates[0];\n                        return (\n                          <Line\n                            key={target}\n                            from={getCentroid(geo.geometry.coordinates[0])}\n                            to={getCentroid(coords)}\n                            stroke=\"rgb(75, 192, 192)\"\n                            strokeWidth={2}\n                            opacity={0.5}\n                            strokeLinecap=\"round\"\n                          />\n                        );\n                      });\n                  })\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default MapChart;\n","import ReactTooltip from \"react-tooltip\";\n\nconst MapTooltip = ({ country, transport, year }) => {\n  const tootipContent = () => {\n    if (!country) return;\n    const name = country?.geo.properties.NAME;\n    if (!country.data) {\n      return (\n        <div>\n          <h3>{name}</h3>\n          <p>No data available</p>\n        </div>\n      );\n    }\n    const total = Object.values(country.data).reduce((acc, amount) => {\n      return (acc += amount);\n    }, 0);\n\n    const population = (country.geo.properties.POP_EST / 1000000).toFixed(2);\n    const passengers = (total / 1000000).toFixed(2);\n\n    return (\n      <div>\n        <h3>{name}</h3>\n        <p>\n          Population: <b>{population}M</b>\n        </p>\n        <p>\n          Total passengers leaving by {transport} in {year}:{\" \"}\n          <b>{passengers}M</b>\n        </p>\n      </div>\n    );\n  };\n\n  return <ReactTooltip>{tootipContent()}</ReactTooltip>;\n};\n\nexport default MapTooltip;\n","import { useState, useEffect } from \"react\";\n\nconst SidebarContainer = ({ open, onClose, sidebarContent, mainContent }) => {\n  const [opened, setOpened] = useState(false);\n\n  useEffect(() => {\n    setOpened(open);\n  }, [open]);\n\n  const close = () => {\n    setOpened(false);\n    onClose();\n  }\n\n  return (\n    <div className=\"sidebar-container\">\n      {opened && (\n        <div className=\"sidebar-left\">\n          <div className=\"close\" onClick={close}>x</div>\n          {sidebarContent}\n        </div>\n      )}\n      <div className=\"sidebar-right\">\n        {mainContent}\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarContainer;\n","import { useMemo } from \"react\";\n\nconst useDatasetsLimits = (data) => {\n  const limits = useMemo(() => {\n    let max = -Infinity;\n    let min = Infinity;\n    Object.values(data).forEach((year) => {\n      return Object.values(year).forEach((country) =>\n        Object.values(country).forEach((val) => {\n          if (val) {\n            max = Math.max(val, max);\n            min = Math.min(val, min);\n          }\n        })\n      );\n    });\n    return [max, min];\n  }, [data]);\n\n  return limits;\n};\n\nexport default useDatasetsLimits;\n","import { useState, useMemo, useEffect } from \"react\";\nimport chroma from \"chroma-js\";\n\nimport Navbar from \"./Navbar\";\nimport Sidebar from \"./Sidebar\";\nimport Header from \"./Header\";\nimport MapChart from \"./MapChart\";\nimport MapTooltip from \"./MapTooltip\";\nimport SidebarContainer from \"./SidebarContainer\";\nimport useDatasetsLimits from \"../hooks/useDatasetLimits\";\n\nimport { TRANSPORT_OPTS, YEAR_OPTS } from \"../constants\";\n\nconst Main = ({ datasets }) => {\n  const [year, setYear] = useState(2020);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [transport, setTransport] = useState(\"plane\");\n\n  const dataset = useMemo(() => datasets[transport][year], [\n    datasets,\n    transport,\n    year,\n  ]);\n\n  const [max, min] = useDatasetsLimits(datasets[transport]);\n\n  const scale = useMemo(() => {\n    const range = [\"lightgrey\", \"#11987F\"];\n    return chroma.scale(range).domain([min, max]);\n  }, [max, min]);\n\n  useEffect(() => {\n    const countries = selectedCountries.map(country => {\n      return {\n      ...country,\n      data: dataset[country.ISO],\n    }})\n    setSelectedCountries(countries);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transport, year])\n\n  return (\n    <SidebarContainer\n      open={selectedCountries.length > 0}\n      onClose={() => setSelectedCountries([])}\n      sidebarContent={\n        <Sidebar\n          dataset={datasets[transport]}\n          countries={selectedCountries}\n          year={year}\n          transport={transport}\n        />\n      }\n      mainContent={\n        <div className=\"main\">\n          <Header />\n          <Navbar\n            selected={transport}\n            setSelected={setTransport}\n            options={TRANSPORT_OPTS}\n          />\n          <MapChart\n            dataset={dataset}\n            scale={scale}\n            hoveredCountry={hoveredCountry}\n            selectedCountries={selectedCountries}\n            setHoveredCountry={setHoveredCountry}\n            setSelected={setSelectedCountries}\n          />\n          <MapTooltip\n            country={hoveredCountry}\n            transport={transport}\n            year={year}\n          />\n          <Navbar selected={year} setSelected={setYear} options={YEAR_OPTS} />\n        </div>\n      }\n    />\n  );\n};\n\nexport default Main;\n","const Loading = () => {\n  return <h2>eurotransit</h2>;\n};\n\nexport default Loading;\n","\nconst Error = () => {\n  return (\n    <div>\n      <h2>eurotransit</h2>\n      <p>[eurotransit is not available right now. Please try again later]</p>\n    </div>\n  );\n};\n\nexport default Error;\n","import { DATASETS } from \"./constants\";\n\nexport const formatData = (dataset) => {\n  const [header, ...data] = dataset.content;\n  const meta = [\"origin\", \"destination\"];\n\n  // Locate origin and destination columns;\n  const origin = header.indexOf(meta[0]);\n  const destination = header.indexOf(meta[1]);\n\n  // Locate years\n  const years = header.filter((x) => !meta.includes(x));\n\n  // Create object with the available years;\n  const formated = years.reduce((acc, year) => {\n    acc[year] = {};\n    return acc;\n  }, {});\n\n  const parseVal = (v) => (isNaN(Number(v)) ? null : Number(v));\n\n  // Fill object;\n  Object.keys(formated).forEach((year) => {\n    const yearIdx = header.indexOf(year);\n\n    data.forEach((row) => {\n      if (row[destination] === undefined) return; // weird error in a ds;\n\n      if (row[origin] in formated[year]) {\n        formated[year][row[origin]][row[destination]] = parseVal(row[yearIdx]);\n      } else {\n        formated[year][row[origin]] = {\n          [row[destination]]: parseVal(row[yearIdx]),\n        };\n      }\n    });\n  });\n\n  return {\n    content: formated,\n    dataset: dataset.dataset,\n  };\n};\n\nexport const mergeDatasets = (datasets) => {\n  const planes = datasets.find((ds) => ds.dataset === DATASETS.planes);\n  const trainBig = datasets.find((ds) => ds.dataset === DATASETS.train);\n  const train2020 = datasets.find((ds) => ds.dataset === DATASETS.train2020);\n\n  return {\n    plane: planes.content,\n    train: { ...trainBig.content, ...train2020.content },\n  };\n};\n\nexport const formatDataSets = (datasets) => {\n  const formated = datasets.map(formatData);\n  const merged = mergeDatasets(formated);\n  return merged;\n};","import { useState, useEffect, useCallback } from \"react\";\nimport { parse } from \"papaparse\";\n\nimport { BASE_URL, DATASETS } from \"../constants\";\nimport { formatDataSets } from \"../utils\";\n\nconst useDatasets = () => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const format = useCallback((ds) => formatDataSets(ds), []);\n\n  const handleError = (err) => {\n    setError(err);\n    console.error(\"Error retrieving the data:\", err);\n  };\n\n  useEffect(() => {\n    const promises = Object.values(DATASETS).map((dataset) =>\n      fetch(BASE_URL + dataset)\n        .then((response) => response.text())\n        .then(async (v) => {\n          const parsed = await parse(v);\n          return {\n            res: parsed,\n            name: dataset,\n          };\n        })\n        .catch(handleError)\n    );\n\n    Promise.all(promises)\n      .then((res) => {\n        const errors = res.filter((x) => x.res.errors.length > 0);\n        const isError = errors.length > 0;\n\n        if (isError) {\n          handleError(errors);\n        } else {\n          const data = res.map((x) => ({\n            content: x.res.data,\n            dataset: x.name,\n          }));\n          setTimeout(() => {\n            const formated = format(data);\n            setData(formated);\n          }, 1500);\n        }\n      })\n      .catch(handleError);\n  }, [format]);\n\n  return [data, error];\n};\n\nexport default useDatasets;\n","import Main from \"./components/Main\";\nimport Loading from \"./components/Loading\";\nimport Error from \"./components/Error\";\n\nimport useDatasets from \"./hooks/useDatasets\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [data, error] = useDatasets();\n\n  return (\n    <div className=\"App\">\n      {error ? <Error /> : data ? <Main datasets={data} /> : <Loading />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}