{"version":3,"sources":["components/main/Navbar.jsx","hooks/useAutoplay.jsx","constants.js","components/main/Autoplay.jsx","components/main/YearSelector.jsx","components/sidebar/DoughnutChart.jsx","components/sidebar/StackedBarChart.jsx","components/sidebar/Sidebar.jsx","assets/imgs/fabian.png","assets/imgs/david.png","assets/imgs/yan.png","assets/imgs/gonzalo.png","components/sidebar/About.jsx","components/main/MapChart.jsx","components/main/MapTooltip.jsx","components/main/Overlay.jsx","components/SidebarContainer.jsx","hooks/useDatasetLimits.jsx","hooks/useColorSet.jsx","components/Legend.jsx","components/Main.jsx","components/Loading.jsx","components/Error.jsx","utils.js","hooks/useDatasets.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Navbar","options","selected","setSelected","setAbout","about","setClass","useCallback","method","className","map","opt","value","onClick","label","useAutoplay","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","DATASETS","train2020","planes","train","codes","TRANSPORT_OPTS","YEAR_OPTS","Array","from","length","_","i","year","COUNTRY_COLORS","AT","BE","BG","CH","CY","CZ","DE","DK","EE","EL","ES","FI","FR","HR","HU","IE","IS","IT","LT","LU","LV","ME","MK","MT","NL","NO","PL","PT","RO","RS","SE","SI","SK","TR","UK","Autoplay","setYear","play","useState","playing","setPlaying","data-tip","YearSelector","DoughnutChart","countries","filteredCountries","Object","keys","data","filter","x","geo","properties","ISO_A2","labels","country","datasets","NAME","values","datasetKeyProvider","backgroundColor","chart","dataIndex","borderColor","borderWidth","animation","duration","legend","display","StackedBarChart","dataset","countryCode","transport","idx","years","forEach","push","key","scales","yAxes","gridLines","color","stacked","ticks","index","beginAtZero","fontColor","scaleLabel","labelString","xAxes","d","Sidebar","countryInfo","ISO","imgUrl","total","reduce","acc","amount","ShowDoughnutChart","alt","src","POP_EST","toFixed","About","imgs","fabian","david","yan","gonzalo","style","flexDirection","paddingTop","paddingLeft","people","person","image","name","href","email","target","rel","MapChart","colorSet","scale","limits","selectedCountries","setHoveredCountry","setHoveredLink","isSelected","find","c","getCentroid","sum","coord","y","projection","projectionConfig","rotate","geography","geodata","geographies","v","stroke","background","onMouseEnter","onMouseLeave","default","fill","UIAccent","disabled","opacity","outline","transition","hover","cursor","pressed","rsmKey","g","originCoords","geometry","coordinates","targetCoords","diff","originName","targetName","passengers","thickness","lineWidth","to","strokeWidth","strokeLinecap","ReactTooltipStyled","styled","ReactTooltip","MapTooltip","link","tooltipLinkContent","population","tooltipCountryContent","Overlay","position","width","height","SidebarContainer","open","onClose","sidebarContent","mainContent","opened","setOpened","useDatasetsLimits","useMemo","max","Infinity","min","all","val","Math","useColorSet","isInDarkMode","window","matchMedia","matches","theme","dark","light","UI","accent","plane","disabled_dark","disabled_light","Legend","transportation","range","color_range","chroma","domain","colors","Main","setSelectedCountries","hoveredCountry","hoveredLink","setTransport","setAbout0","flag","Loading","Error","formatData","content","header","meta","origin","indexOf","destination","formated","includes","parseVal","isNaN","Number","yearIdx","row","undefined","formatCC","codesDataset","formatted","formatDataSets","countryCodes","merged","ds","trainBig","mergeDatasets","useDatasets","setData","error","setError","format","handleError","err","console","promises","fetch","then","response","text","a","parse","parsed","res","catch","Promise","errors","setTimeout","App","bgMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAuCeA,EArCA,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MACpDC,EAAWC,uBACf,SAACC,GACC,OAASH,GAASH,IAAaM,EAA6B,cAAnB,mBAE3C,CAACN,EAAUG,IAGb,OACE,sBAAKI,UAAW,aAAhB,UACE,qBAAKA,UAAU,WAAf,SACE,+CAEF,qBAAKA,UAAU,gBACdR,EAAQS,KAAI,SAACC,GAAD,OACX,wBAEEF,UAAWH,EAASK,EAAIC,OACxBC,QAAS,WACPT,GAAS,GACTD,EAAYQ,EAAIC,QALpB,SAQGD,EAAIG,OAPAH,EAAIC,UAUb,wBAEEH,UAAS,kBAAaJ,EAAQ,SAAW,OACzCQ,QAAS,kBAAMT,GAAS,IAH1B,kBACM,a,QCRGW,EAnBK,SAACC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAGR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAHE,kBAAML,EAAcG,YAGJJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,KCfOQ,EAAW,CACtBC,UAAW,mCACXC,OAAQ,qBACRC,MAAO,yBACPC,MAAM,qBAGKC,EAAiB,CAC5B,CAAElB,MAAO,QAASE,MAAO,eACzB,CAAEF,MAAO,QAASE,MAAO,gBAGdiB,EAAYC,MAAMC,KAC7B,CAAEC,OAAQ,KACV,SAACC,EAAGC,GAAJ,OAAU,KAAOA,KACjB1B,KAAI,SAAC2B,GAAD,MAAW,CACfzB,MAAOyB,EACPvB,MAAOuB,MAIIC,EAAiB,CAC5BC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,WC7BSC,EAxBE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAAStC,EAAiB,EAAjBA,KAAMuC,EAAW,EAAXA,KAAW,EACdC,mBAASD,GADK,mBACrCE,EADqC,KAC5BC,EAD4B,KAa5C,OAVAhE,GAAY,WACN+D,IACEzC,IAASN,EAAUA,EAAUG,OAAS,GAAGtB,MAC3C+D,EAAQ5C,EAAU,GAAGnB,OAErB+D,EAAQtC,EAAO,MAGlB,KAGD,wBACE2C,WAAS,iBACTvE,UAAWqE,EAAU,aAAe,UACpCjE,QAAS,kBAAMkE,GAAYD,IAH7B,SAKE,cAAC,IAAD,OCESG,EAxBM,SAAC,GAAyC,IAAvChF,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,YACnCG,EAAWC,uBACf,SAACC,GACC,OAAON,IAAaM,EAAS,aAAe,YAE9C,CAACN,IAGH,OACE,sBAAKO,UAAW,oBAAhB,UACGR,EAAQS,KAAI,SAACC,GAAD,OACX,wBAEEF,UAAWH,EAASK,EAAIC,OACxBC,QAAS,kBAAMV,EAAYQ,EAAIC,QAHjC,SAKGD,EAAIG,OAJAH,EAAIC,UAOb,cAAC,EAAD,CAAU+D,QAASxE,EAAakC,KAAMnC,EAAU0E,MAAM,Q,QCa7CM,EAhCO,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAWtD,EAAY,EAAZA,MAE5BuD,EAAoBC,OAAOC,KAAKH,EAAU,GAAGI,MAAMC,QACvD,SAACC,GAAD,OAAON,EAAU,GAAGI,KAAKE,MAI3BN,EAAU,GAAGI,KAAKJ,EAAU,GAAGO,IAAIC,WAAWC,QAAU,KAExD,IAAML,EAAO,CACXM,OAAQT,EAAkB1E,KAAI,SAAAoF,GAAO,OAAIjE,EAAMiE,MAC/CC,SAAU,CACR,CACEjF,MAAM,4BAAD,OAA8BqE,EAAU,GAAGO,IAAIC,WAAWK,MAC/DT,KAAMF,OAAOY,OAAOd,EAAU,GAAGI,MAAMC,QAAO,SAACC,GAAD,OAAOA,KACrDS,mBAAoB,kBAAMf,EAAU,GAAGO,IAAIC,WAAWK,MACtDG,gBAAiB,SAACC,GAAD,OAAW9D,EAAe8C,EAAkBgB,EAAMC,aACnEC,YAAa,SAACF,GAAD,OAAW9D,EAAe8C,EAAkBgB,EAAMC,aAC/DE,YAAa,KAWnB,OAAO,cAAC,WAAD,CAAUtG,QAPD,CACduG,UAAW,CACTC,SAAU,GAEZC,OAAQ,CAAEC,SAAS,IAGcpB,KAAMA,KC+C5BqB,EA3ES,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,YAAajF,EAAuB,EAAvBA,MAGzCkE,GAHgE,EAAhBgB,UACpC1B,OAAOC,KAAKuB,EAAQ9E,EAAU,GAAGnB,QAExBF,KAAI,SAACoF,EAASkB,GACvC,IAAMC,EAAQ,GAWd,OATAlF,EAAUmF,SAAQ,YAAgB,IAAD,IAAZtG,EAAY,EAAZA,MAEfkF,IAAYgB,IAEhB,OAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAUjG,UAAd,iBAAI,EAAmBkG,UAAvB,aAAI,EAAkChB,KACpCmB,EAAME,KAAKN,EAAQjG,GAAOkG,GAAahB,OAIpC,CACLsB,IAAI,GAAD,OAAKtB,EAAL,YAAgBkB,GACnBlG,MAAOe,EAAMiE,GACbP,KAAM0B,EACNd,gBAAiB7D,EAAewD,QAI9BP,EAAO,CACXM,OAAQ9D,EAAUrB,KAAI,SAAC2B,GAAD,OAAUA,EAAKzB,SACrCmF,SAAUA,GAyCZ,OACE,cAAC,MAAD,CACE9F,QAxCY,CACdyG,OAAQ,CAAEC,SAAS,GACnBU,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTC,MAAO,WAETC,SAAS,EACTC,MAAO,CACL1G,SAAU,SAAUJ,EAAO+G,EAAO1B,GAChC,OAAIrF,EAAQ,KAAW,EAAS,GAAN,OAAUA,EAAQ,IAAlB,KACrB,UAAUA,EAAQ,IAAlB,MAEPgH,aAAa,EACbC,UAAW,aAEbC,WAAY,CACVnB,SAAS,EACToB,YAAa,uBACbF,UAAW,eAIjBG,MAAO,CACL,CACET,UAAW,CACTC,MAAO,WAETC,SAAS,EACTC,MAAO,CACLG,UAAW,iBAUjBtC,KAAMA,EACNW,mBAAoB,SAAC+B,GAAD,OAAOA,EAAEb,QCnBpBc,EApDC,SAAC,GAAoD,IAAD,MAAjD/C,EAAiD,EAAjDA,UAAW0B,EAAsC,EAAtCA,QAAShF,EAA6B,EAA7BA,MAAOQ,EAAsB,EAAtBA,KAAM0E,EAAgB,EAAhBA,UAElD,GAAwB,IAArB5B,EAAUjD,OAAc,OAAO,EAElC,IAAMiG,EAAW,UAAGhD,EAAU,UAAb,aAAG,EAAcO,IAAIC,WAChCmB,EAAW,UAAG3B,EAAU,UAAb,aAAG,EAAciD,IAE5BC,EAAM,sCADe,OAAhBvB,EAAuB,KAAOA,EAC7B,gBACNwB,EAAQjD,OAAOY,OAAOd,EAAU,GAAGI,MAAMgD,QAAO,SAACC,EAAKC,GAC1D,OAAQD,EAAOC,IACd,GAEH,SAASC,IACP,OAAiB,OAATrG,GAA+B,UAAd0E,EACvB,mBAAGtG,UAAU,eAAb,uDACA,cAAC,EAAD,CAAe0E,UAAWA,EAAWtD,MAAOA,IAGhD,OACE,sBAAKpB,UAAU,UAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKkI,IAAKR,EAAYnC,KAAM4C,IAAKP,IACjC,uCAAKlD,EAAU,UAAf,aAAK,EAAcO,IAAIC,WAAWK,UAEpC,sBAAKvF,UAAU,iBAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,gCACE,gCAAM0H,EAAYU,QAAU,KAASC,QAAQ,GAA7C,OACA,8CAIF,sBAAKrI,UAAU,YAAf,UACE,gCAAM6H,EAAM,KAASQ,QAAQ,GAA7B,OACA,0DAKJ,gCACE,2DAA8BX,EAAYnC,QAC1C,cAAC0C,EAAD,OAEF,gCACE,6DACA,cAAC,EAAD,CAAiB7B,QAASA,EAASC,YAAaA,EAAajF,MAAOA,EAAOkF,UAAWA,c,QChDjF,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,gCCA1B,MAA0B,oCCsP1BgC,EA/OD,WACZ,IAAMC,EAAO,CAAEC,SAAQC,QAAOC,MAAKC,WAsCnC,OACE,sBAAK3I,UAAU,UAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,2DAEF,qBAAKA,UAAU,sBAAf,SACE,sBACE4I,MAAO,CACL1C,QAAS,OACT2C,cAAe,SACfC,WAAY,OACZC,YAAa,QALjB,UAQE,0CACCjE,EAAKkE,OAAO/I,KAAI,SAACgJ,GAAD,OACf,qBAAuBjJ,UAAU,mBAAjC,SACE,gCACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKkI,IAAI,UAAUC,IAAKI,EAAKU,EAAOC,WAEtC,sBAAKlJ,UAAU,iBAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBiJ,EAAOE,OAC9B,mBAAGnJ,UAAU,YAAYoJ,KAAI,kBAAaH,EAAOI,OAAjD,SACE,4BAAIJ,EAAOI,iBARTJ,EAAOE,SAkBnB,mDACA,qBAAKnJ,UAAU,OAAf,4mBAYA,+CAEA,qBAAKA,UAAU,OAAf,SACE,+BACE,+BACE,yCADF,0CAGA,+BACE,sCADF,2CAGA,+BACE,wCADF,6EAGA,+BACE,0CADF,sDAKJ,4CACA,qBAAKA,UAAU,OAAf,SACE,mBACEA,UAAU,OACVsJ,OAAO,SACPC,IAAI,aACJH,KAAK,8CAJP,mCASF,iDACA,iFAAmD,uBACjD,mBAAGA,KAAK,4DAAR,uEAAiI,uBAAM,0BACzI,sBAAKpJ,UAAU,OAAf,UACE,mBACEA,UAAU,OACVsJ,OAAO,SACPC,IAAI,aACJH,KAAK,2GAJP,2CAQA,ugBAGA,mBACEpJ,UAAU,OACVsJ,OAAO,SACPC,IAAI,aACJH,KAAK,gHAJP,4CAQA,saAGA,mBACEpJ,UAAU,OACVsJ,OAAO,SACPC,IAAI,aACJH,KAAK,gHAJP,iDAQA,geAIF,8DACA,qBAAKpJ,UAAU,OAAf,SACE,+BACE,8DAEA,0GAEA,gGAEA,uGAEA,kIAEA,yOAEA,uGAEA,uFAIJ,kDACA,qBAAKA,UAAU,OAAf,SACE,+BACE,uDACwB,IADxB,uJACgL,mBAAGoJ,KAAK,2CAAR,0DAEhL,wNACoK,mBAAGA,KAAK,kCAAR,iDAEpK,6KAC6I,mBAAGA,KAAK,0FAAR,gCAD7I,OAGA,8FAC8D,mBAAGA,KAAK,+DAAR,iCAD9D,YAKJ,4CACA,qBAAKpJ,UAAU,OAAf,SACE,mBACEA,UAAU,OACVsJ,OAAO,SACPC,IAAI,aACJH,KAAK,4CAJP,iDASF,uDACA,sBAAKpJ,UAAU,OAAf,UACE,8CACA,mBACEA,UAAU,OACVsJ,OAAO,SACPC,IAAI,aACJH,KAAK,uBAJP,sBAQA,sCACA,mBACEpJ,UAAU,OACVsJ,OAAO,SACPC,IAAI,aACJH,KAAK,uCAJP,sBAQA,yCACA,mBACEpJ,UAAU,OACVsJ,OAAO,SACPC,IAAI,aACJH,KAAK,oCAJP,+BApBF,IA4BG,oG,uBC7DEI,EAvKE,SAAC,GAUX,IATLpD,EASI,EATJA,QACAqD,EAQI,EARJA,SACAC,EAOI,EAPJA,MACAC,EAMI,EANJA,OACArD,EAKI,EALJA,UACAsD,EAII,EAJJA,kBACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,eACApK,EACI,EADJA,YAQMqK,EAAa,SAAC9E,GAAD,cACjB2E,QADiB,IACjBA,OADiB,EACjBA,EAAmBI,MAAK,SAACC,GAAD,OAAOA,EAAEtC,MAAQ1C,EAAIC,WAAWC,WACpD+E,EAAc,SAACpF,GACnB,IAAKA,EAAM,MAAO,CAAC,EAAG,GACtB,IAAMqF,EAAMrF,EAAKgD,QACf,SAACC,EAAKqC,GAGJ,OAFArC,EAAI/C,GAAKoF,EAAM,GACfrC,EAAIsC,GAAKD,EAAM,GACRrC,IAET,CAAE/C,EAAG,EAAGqF,EAAG,IAEb,MAAO,CAACF,EAAInF,EAAIF,EAAKrD,OAAQ0I,EAAIE,EAAIvF,EAAKrD,SAG5C,OACE,qBAAKzB,UAAU,YAAf,SACE,cAAC,gBAAD,CACEuE,WAAS,GACT+F,WAAW,wBACXC,iBAAkB,CAChBC,OAAQ,EAAE,IAAO,GAAM,GACvBd,MAAO,KALX,SAQE,eAAC,gBAAD,WACE,cAAC,cAAD,CAAae,UAAWC,EAAxB,SACG,qBAAGC,YACU1K,KAAI,SAACgF,GACf,IAnCEH,EAmCIkD,GAnCJlD,EAmCoBsB,EAAQnB,EAAIC,WAAWC,SAjCrDP,OAAOY,OAAOV,GAAMgD,QAAO,SAACC,EAAK6C,GAAN,OAAY7C,EAAM6C,GAAK,IAAG,GACrD,EAiCQ,OACE,cAAC,YAAD,CAEEH,UAAWxF,EACX4F,OAAQpB,EAASqB,WACjB1K,QAAS,WACFgG,EAAQnB,EAAIC,WAAWC,SAC5BzF,EAAY,CACV,CACEuF,MACA0C,IAAK1C,EAAIC,WAAWC,OACpBL,KAAMsB,EAAQnB,EAAIC,WAAWC,YAInC4F,aAAc,WACZlB,EAAkB,CAChB5E,MACA0C,IAAK1C,EAAIC,WAAWC,OACpBL,KAAMsB,EAAQnB,EAAIC,WAAWC,WAGjC6F,aAAc,WACZnB,EAAkB,OAEpBjB,MAAO,CACLqC,QAAS,CACPC,KAAM9E,EAAQnB,EAAIC,WAAWC,QACzB4E,EAAW9E,GACTwE,EAAS0B,SACTzB,EAAM1B,GACRyB,EAAS2B,SACbC,QAAS,EACTC,QAAS,OACTC,WAAY,SAEdC,MAAO,CACLN,KAAM9E,EAAQnB,EAAIC,WAAWC,QACzBsE,EAAS0B,SACT1B,EAAS2B,SACbE,QAAS,OACTG,OAAQ,WAEVC,QAAS,CACPR,KAAMzB,EAAS0B,SACfG,QAAS,UA3CRrG,EAAI0G,cAmDnB,cAAC,cAAD,CAAalB,UAAWC,EAAxB,SACG,gBAAGC,EAAH,EAAGA,YAAH,OACCA,EAAY1K,KAAI,SAACgF,GACf,OACE8E,EAAW9E,IACX2E,EAAkB3J,KAAI,SAACoF,GACrB,OAAOT,OAAOC,KAAKQ,EAAQP,MACxBC,QAAO,SAACC,GAAD,OAAOK,EAAQP,KAAKE,MAC3B/E,KAAI,SAACqJ,GACJ,IAAMjE,EAAUsF,EAAYX,MAC1B,SAAC4B,GAAD,OAAOA,EAAE1G,WAAWC,SAAWmE,KAG3BuC,EAAe5G,EAAI6G,SACtBC,YAAY,GAAG,GAAG,GAAG,GACpB9G,EAAI6G,SAASC,YAAY,GAAG,GAC5B9G,EAAI6G,SAASC,YAAY,GAEvBC,GAAsB,OAAP3G,QAAO,IAAPA,OAAA,EAAAA,EAASyG,SAC3BC,YAAY,GAAG,GAAG,GAAG,IADH,OAEjB1G,QAFiB,IAEjBA,OAFiB,EAEjBA,EAASyG,SAASC,YAAY,GAAG,GAFhB,OAGjB1G,QAHiB,IAGjBA,OAHiB,EAGjBA,EAASyG,SAASC,YAAY,GAElC,IAAKF,IAAiBG,EAAc,OAAO,EAf5B,kBAiBIrC,EAjBJ,GAmBTsC,EAnBS,UAqBTC,EAAajH,EAAIC,WAAWC,OAC5BgH,EAAa9G,EAAQH,WAAWC,OAChCiH,EAAahG,EAAQ8F,GAAYC,GACjCE,EAA0B,GAAbD,EAAmBH,EAChCK,EACU,UAAdhG,EAAwB+F,EAAY,IAAMA,EAE5C,OACE,cAAC,OAAD,CAEE7K,KAAM0I,EAAY2B,GAClBU,GAAIrC,EAAY8B,GAChBnB,OAAO,UACPQ,QAAS,GACTN,aAAc,kBACZjB,EAAe,CACbtI,KAAMyD,EAAIC,WACVqH,GAAIlH,EAAQH,WACZkH,WAAYA,KAGhBpB,aAAc,kBAAMlB,EAAe,OACnC0C,YAAaF,EAAY,EAAI,EAAIA,EACjCG,cAAc,SAdTnD,uB,wBCjJpBoD,EAAqBC,YAAOC,IAAPD,CAAH,0JAkEhBE,EA1DI,SAAC,GAAwC,IAAtCxH,EAAqC,EAArCA,QAASyH,EAA4B,EAA5BA,KAAMxG,EAAsB,EAAtBA,UAAW1E,EAAW,EAAXA,KAuD9C,OAAO,cAAC8K,EAAD,UATDI,EAfqB,WAAO,IACxBtL,EAAyBsL,EAAzBtL,KAAM+K,EAAmBO,EAAnBP,GAAIH,EAAeU,EAAfV,WAClB,OACE,gCACE,sCACO,4BAAI5K,EAAK+D,OADhB,OAC6B,4BAAIgH,EAAGhH,UAEpC,uDACwB,+BAAK6G,EAAa,KAAS/D,QAAQ,GAAnC,aAQnB0E,GACE1H,EA/CiB,WAC5B,IAAM8D,EAAI,OAAG9D,QAAH,IAAGA,OAAH,EAAGA,EAASJ,IAAIC,WAAWK,KACrC,IAAKF,EAAQP,KACX,OACE,8BACE,6BAAKqE,MAIX,IAAMtB,EAAQjD,OAAOY,OAAOH,EAAQP,MAAMgD,QAAO,SAACC,EAAKC,GACrD,OAAQD,EAAOC,IACd,GAEGgF,GAAc3H,EAAQJ,IAAIC,WAAWkD,QAAU,KAASC,QAAQ,GAChE+D,GAAcvE,EAAQ,KAASQ,QAAQ,GAE7C,OACE,gCACE,6BAAKc,IACL,6CACc,8BAAI6D,EAAJ,UAEd,6DAC+B1G,EAD/B,OAC8C1E,EAD9C,IACqD,IACnD,8BAAIwK,EAAJ,aAwBGa,QAEP,KCnDSC,EAXC,kBACd,qBACEtE,MAAO,CACLlD,gBAAiB,kBACjByH,SAAU,WACVC,MAAO,OACPC,OAAQ,W,QC0BCC,EA7BU,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,YAAa9N,EAAY,EAAZA,MAAY,EACtDwE,oBAAS,GAD6C,mBAC3EuJ,EAD2E,KACnEC,EADmE,KAGlFjN,qBAAU,WACRiN,EAAUL,KACT,CAACA,IAOJ,OACE,sBAAKvN,UAAU,oBAAf,UACG2N,GACC,sBAAK3N,UAAU,eAAf,WACIJ,GAAS,qBAAKI,UAAU,QAAQI,QAT5B,WACZwN,GAAU,GACVJ,KAOiB,SACT,cAAC,IAAD,MAEDC,KAGL,qBAAKzN,UAAU,gBAAf,SACG0N,QCDMG,EAvBW,SAAC/I,GAoBzB,OAnBegJ,mBAAQ,WACrB,IAAIC,GAAOC,IACPC,EAAMD,IAcV,OAbApJ,OAAOY,OAAOV,GAAM2B,SAAQ,SAAC7E,GAC3B,OAAOgD,OAAOY,OAAO5D,GAAM6E,SAAQ,SAACpB,GAClC,IAAI6I,EAAM,EACVtJ,OAAOY,OAAOH,GAASoB,SAAQ,SAAC0H,GAC3BA,IAAKD,GAAKC,MAEXD,IACFH,EAAMK,KAAKL,IAAIG,EAAKH,GACpBE,EAAMG,KAAKH,IAAIC,EAAKD,UAKnB,CAACF,EAAKE,KACZ,CAACnJ,KCkBSuJ,EApCK,SAAC/H,GAEjB,IAAImD,EAAW,CACXqB,WAAY,QACZK,SAAU,QACVC,SAAU,SAGRkD,EAAe,WACjB,OAAOC,OAAOC,YAAcD,OAAOC,WAAW,gCAAgCC,SAwBlF,OArBAhF,EAASqB,WAAawD,IAAiBI,EAAMzO,IAAI6K,WAAW6D,KAAOD,EAAMzO,IAAI6K,WAAW8D,MACxFnF,EAAS0B,SAAyB,SAAb7E,EAAwBoI,EAAMG,GAAGC,OAAOC,MAAQL,EAAMG,GAAGC,OAAO3N,MACrFsI,EAAS2B,SACY,SAAb9E,EACIgI,IACOI,EAAMzO,IAAI8O,MAAMC,cAGhBN,EAAMzO,IAAI8O,MAAME,eAIvBX,IACOI,EAAMzO,IAAIkB,MAAM6N,cAGhBN,EAAMzO,IAAIkB,MAAM8N,eAK5BxF,GCVIyF,EApBA,SAAC,GAAgC,IAA9BvF,EAA6B,EAA7BA,OAAQwF,EAAqB,EAArBA,eAAqB,cAC1BxF,EAD0B,GACtCoE,EADsC,KACjCE,EADiC,KAEvCmB,EAAQ,CAACV,EAAMzO,IAAIkP,GAAgBlB,IAAKS,EAAMzO,IAAIkP,GAAgBpB,KAClEsB,EAAcC,IAAO5F,MAAM0F,GAAOG,OAAO,CAACtB,EAAKF,IAAMyB,OAAO,GAClE,OACE,sBAAKxP,UAAU,SAAf,UACE,wCACA,qBAAKA,UAAU,iBAAf,SACGqP,EAAYpP,KAAI,SAACC,GAAD,OACf,qBAAK0I,MAAO,CAAElD,gBAAiBxF,EAAKkN,MAAO,OAAQC,OAAQ,eAG/D,sBAAKrN,UAAU,sBAAf,UACE,sBAAKA,UAAU,eAAf,UAAiD,SAAlBmP,GAA6BlB,EAAM,KAAM5F,QAAQ,GAAK4F,EAAuB,SAAlBkB,EAA4B,IAAM,GAA5H,iBACA,sBAAKnP,UAAU,eAAf,WAAgC+N,EAAM,KAAS1F,QAAQ,GAAvD,yBCkHOoH,EAlHF,SAAC,GAAkB,IAAhBnK,EAAe,EAAfA,SAAe,EACLlB,mBAAS9C,EAAUA,EAAUG,OAAS,GAAGtB,OADpC,mBACtByB,EADsB,KAChBsC,EADgB,OAEqBE,mBAAS,IAF9B,mBAEtBwF,EAFsB,KAEH8F,EAFG,OAGetL,mBAAS,MAHxB,mBAGtBuL,EAHsB,KAGN9F,EAHM,OAISzF,mBAAS,MAJlB,mBAItBwL,EAJsB,KAIT9F,EAJS,OAKK1F,mBAAS,SALd,mBAKtBkC,EALsB,KAKXuJ,EALW,OAMFzL,oBAAS,GANP,mBAMtBxE,EANsB,KAMfkQ,EANe,KAQvBnQ,EAAW,SAACoQ,GAChBL,EAAqB,IACrBI,EAAUC,IAGN3J,EAAU0H,mBAAQ,kBAAMxI,EAASgB,GAAW1E,KAAO,CACvD0D,EACAgB,EACA1E,IAhB2B,EAmBViM,EAAkBvI,EAASgB,IAnBjB,mBAmBtByH,EAnBsB,KAmBjBE,EAnBiB,KAqBvBvE,EAAQoE,mBAAQ,WACpB,IAIMsB,EAAQ,CAHC,SAAb9I,EAAuBoI,EAAMzO,IAAI8O,MAAMd,IAAMS,EAAMzO,IAAIkB,MAAM8M,IAEhD,SAAb3H,EAAuBoI,EAAMzO,IAAI8O,MAAMhB,IAAMW,EAAMzO,IAAIkB,MAAM4M,KAE/D,OAAOuB,IAAO5F,MAAM0F,GAAOG,OAAO,CAACtB,EAAKF,MACvC,CAACA,EAAKE,IAEHxE,EAAW4E,EAAY/H,GAa7B,OAXA3F,qBAAU,WACR,IAAM+D,EAAYkF,EAAkB3J,KAAI,SAACoF,GACvC,OAAO,2BACFA,GADL,IAEEP,KAAMsB,EAAQf,EAAQsC,UAG1B+H,EAAqBhL,KAEpB,CAAC4B,EAAW1E,IAGb,cAAC,EAAD,CACE2L,KAAM3N,GAASgK,EAAkBnI,OAAS,EAC1C7B,MAAOA,EACP4N,QAAS,WACPkC,EAAqB,IACrB/P,GAAS,IAEX8N,eACE7N,EACE,cAAC,EAAD,IAEA,cAAC,EAAD,CACEwG,QAASd,EAASgB,GAClB5B,UAAWkF,EACXhI,KAAMA,EACN0E,UAAWA,EACXlF,MAAOkE,EAASlE,QAItBsM,YACE,sBAAK1N,UAAU,OAAf,UACGJ,GAAS,cAAC,EAAD,IAEV,cAAC,EAAD,CACEH,SAAU6G,EACV5G,YAAa,SAACK,GAAD,OAAY8P,EAAa9P,IACtCP,QAAS6B,EACToI,SAAUA,EACV9J,SAAUA,EACVC,MAAOA,IAET,cAAC,EAAD,CACEwG,QAASA,EACTqD,SAAUA,EACVC,MAAOA,EACPpD,UAAWA,EACXqD,OAAQ,CAACoE,EAAKE,GACdnE,eAAgBA,EAChB6F,eAAgBA,EAChB/F,kBAAmBA,EACnBC,kBAAmBA,EACnBnK,YAAagQ,IAEf,cAAC,EAAD,CACErK,QAASsK,EACT7C,KAAM8C,EACNtJ,UAAWA,EACX1E,KAAMA,KAENhC,GACA,qCACE,cAAC,EAAD,CACEH,SAAUmC,EACVlC,YAAawE,EACb1E,QAAS8B,IAEX,cAAC,EAAD,CACEqI,OAAQ,CAACoE,EAAKE,GACdS,MAAOA,EACPS,eAAgB7I,aCvHjB0J,EAJC,WACd,OAAO,oBAAInP,GAAG,cAAP,0BCSMoP,EATD,WACZ,OACE,gCACE,6CACA,qG,4DCHOC,GAAa,SAAC9J,GAAa,IAAD,eACXA,EAAQ+J,SAA3BC,EAD8B,KACnBtL,EADmB,WAE/BuL,EAAO,CAAC,SAAU,eAGlBC,EAASF,EAAOG,QAAQF,EAAK,IAC7BG,EAAcJ,EAAOG,QAAQF,EAAK,IAMlCI,EAHQL,EAAOrL,QAAO,SAACC,GAAD,OAAQqL,EAAKK,SAAS1L,MAG3B8C,QAAO,SAACC,EAAKnG,GAElC,OADAmG,EAAInG,GAAQ,GACLmG,IACN,IAEG4I,EAAW,SAAC/F,GAAD,OAAQgG,MAAMC,OAAOjG,IAAM,KAAOiG,OAAOjG,IAmB1D,OAhBAhG,OAAOC,KAAK4L,GAAUhK,SAAQ,SAAC7E,GAC7B,IAAMkP,EAAUV,EAAOG,QAAQ3O,GAE/BkD,EAAK2B,SAAQ,SAACsK,QACaC,IAArBD,EAAIP,KAEJO,EAAIT,KAAWG,EAAS7O,GAC1B6O,EAAS7O,GAAMmP,EAAIT,IAASS,EAAIP,IAAgBG,EAASI,EAAID,IAE7DL,EAAS7O,GAAMmP,EAAIT,IAAnB,gBACGS,EAAIP,GAAeG,EAASI,EAAID,YAMlC,CACLX,QAASM,EACTrK,QAASA,EAAQA,UAIf6K,GAAW,SAACC,GAAiB,mBAEPA,EAAaf,SAArBrL,GAFe,iBAG3BqM,EAAYvM,OAAOY,OAAOV,GAAMgD,QAAO,SAACC,EAAK1C,GAEjD,OADA0C,EAAI1C,EAAQ,IAAMA,EAAQ,GACnB0C,IACN,IAEH,OAAO,2BAAKmJ,GAAZ,IAA0Bf,QAASgB,KAgBxBC,GAAiB,SAAC9L,GAC7B,IAAM+L,EAAe/L,EAASP,QAAO,SAACC,GAAD,OAAOA,EAAEoB,UAAYpF,EAASI,SAE7DqP,EADOnL,EAASP,QAAO,SAACC,GAAD,OAAOA,EAAEoB,UAAYpF,EAASI,SACrCnB,IAAIiQ,IAGpBoB,EAnBqB,SAAChM,GAC5B,IAAMpE,EAASoE,EAAS0E,MAAK,SAACuH,GAAD,OAAQA,EAAGnL,UAAYpF,EAASE,UACvDsQ,EAAWlM,EAAS0E,MAAK,SAACuH,GAAD,OAAQA,EAAGnL,UAAYpF,EAASG,SACzDF,EAAYqE,EAAS0E,MAAK,SAACuH,GAAD,OAAQA,EAAGnL,UAAYpF,EAASC,aAC1DG,EAAQkE,EAAS0E,MAAK,SAACuH,GAAD,OAAQA,EAAGnL,UAAYpF,EAASI,SAE5D,MAAO,CACL2N,MAAO7N,EAAOiP,QACdhP,MAAM,2BAAMqQ,EAASrB,SAAYlP,EAAUkP,SAC3C/O,MAAOA,EAAM+O,SAUAsB,CADN,CADqBR,GAAQ,WAAR,eAAYI,KACjC,oBAA8BZ,KAIjC/L,EAAYE,OAAOC,KAAKyM,EAAOvC,MAAM,OAU3C,OATAnK,OAAOY,OAAO8L,EAAOnQ,OAAOsF,SAAQ,SAAC7E,GACnCgD,OAAOC,KAAKjD,GAAM6E,SAAQ,SAACpB,GACpBX,EAAUgM,SAASrL,WACfzD,EAAKyD,SAMXiM,GChCMI,GAjDK,WAAO,IAAD,EACAtN,mBAAS,MADT,mBACjBU,EADiB,KACX6M,EADW,OAEEvN,mBAAS,MAFX,mBAEjBwN,EAFiB,KAEVC,EAFU,KAIlBC,EAAShS,uBAAY,SAACyR,GAAD,OAAQH,GAAeG,KAAK,IAEjDQ,EAAc,SAACC,GACnBH,EAASG,GACTC,QAAQL,MAAM,6BAA8BI,IAsC9C,OAnCArR,qBAAU,WACR,IAAMuR,EAAWtN,OAAOY,OAAOxE,GAAUf,KAAI,SAACmG,GAAD,OAC3C+L,MtBlBJ,yEsBkBqB/L,GACdgM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,KAFH,uCAEQ,WAAOxH,GAAP,eAAA2H,EAAA,sEACiBC,gBAAM5H,GADvB,cACE6H,EADF,yBAEG,CACLC,IAAKD,EACLtJ,KAAM/C,IAJJ,2CAFR,uDASGuM,MAAMZ,MAGXa,QAAQ1E,IAAIgE,GACTE,MAAK,SAACM,GACL,IAAMG,EAASH,EAAI3N,QAAO,SAACC,GAAD,OAAOA,EAAE0N,IAAIG,OAAOpR,OAAS,KAGvD,GAFgBoR,EAAOpR,OAAS,EAG9BsQ,EAAYc,OACP,CACL,IAAM/N,EAAO4N,EAAIzS,KAAI,SAAC+E,GAAD,MAAQ,CAC3BmL,QAASnL,EAAE0N,IAAI5N,KACfsB,QAASpB,EAAEmE,SAEb2J,YAAW,WACT,IAAMrC,EAAWqB,EAAOhN,GACxB6M,EAAQlB,KACP,UAGNkC,MAAMZ,KACR,CAACD,IAEG,CAAChN,EAAM8M,I,OChCDmB,OAZf,WAAgB,IAAD,EACSrB,KADT,mBACN5M,EADM,KACA8M,EADA,KAEPoB,EAAS,CACblI,WAAYuD,EAAY,SAASvD,YAEnC,OACE,qBAAK9K,UAAU,MAAM4I,MAAOoK,EAA5B,SACGpB,EAAQ,cAAC,EAAD,IAAY9M,EAAO,cAAC,EAAD,CAAMQ,SAAUR,IAAW,cAAC,EAAD,OCH9CmO,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.61100376.chunk.js","sourcesContent":["import { useCallback } from \"react\";\n\nconst Navbar = ({ options, selected, setSelected, setAbout, about}) => {\n  const setClass = useCallback(\n    (method) => {\n      return (!about && selected === method) ? \"tab-nav-active\" : \"tab-nav-btn\";\n    },\n    [selected, about]\n  );\n\n  return (\n    <div className={\"tab navbar\"}>\n      <div className=\"appTitle\">\n        <h4>eurotransit</h4>\n      </div>\n      <div className=\"verticalBar\"></div>\n      {options.map((opt) => (\n        <button\n          key={opt.value}\n          className={setClass(opt.value)}\n          onClick={() => {\n            setAbout(false);\n            setSelected(opt.value);\n          }}\n        >\n          {opt.label}\n        </button>\n      ))}\n      <button\n        key='about'\n        className={`tab-nav-${about ? \"active\" : \"btn\"}`}\n        onClick={() => setAbout(true)}\n      >\n        About\n      </button>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { useRef, useEffect } from \"react\";\n\nconst useAutoplay = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => savedCallback.current();\n    \n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useAutoplay;\n\n","export const BASE_URL =\n  \"https://raw.githubusercontent.com/dvcarrillo/eurotransit/dev/datasets/\";\n\nexport const DATASETS = {\n  train2020: \"rail_passengers_2020_cleaned.csv\",\n  planes: \"cleaned_planes.csv\",\n  train: \"rail_trips_cleaned.csv\",\n  codes:\"country_codes.csv\",\n};\n\nexport const TRANSPORT_OPTS = [\n  { value: \"plane\", label: \"Plane trips\" },\n  { value: \"train\", label: \"Train trips\" },\n];\n\nexport const YEAR_OPTS = Array.from(\n  { length: 2020 - 2004 + 1 },\n  (_, i) => 2004 + i\n).map((year) => ({\n  value: year,\n  label: year,\n}));\n\n\nexport const COUNTRY_COLORS = {\n  AT: '#A5D6A7',\n  BE: '#B3E5FC',\n  BG: '#E57373',\n  CH: '#81C784',\n  CY: '#FFF176',\n  CZ: '#BA68C8',\n  DE: '#64B5F6',\n  DK: '#DCE775',\n  EE: '#FFB74D',\n  EL: '#7986CB',\n  ES: '#4DB6AC',\n  FI: '#F06292',\n  FR: '#4DD0E1',\n  HR: '#FF8A65',\n  HU: '#4FC3F7',\n  IE: '#FFD54F',\n  IS: '#AED581',\n  IT: '#9575CD',\n  LT: '#A1887F',\n  LU: '#C62828',\n  LV: '#2E7D32',\n  ME: '#F9A825',\n  MK: '#6A1B9A',\n  MT: '#1565C0',\n  NL: '#9E9D24',\n  NO: '#EF6C00',\n  PL: '#283593',\n  PT: '#00695C',\n  RO: '#AD1457',\n  RS: '#00838F',\n  SE: '#D84315',\n  SI: '#0277BD',\n  SK: '#FF8F00',\n  TR: '#558B2F',\n  UK: '#4527A0',\n}\n","import { useState } from \"react\";\nimport { FaPlay } from \"react-icons/fa\";\n\nimport useAutoplay from \"../../hooks/useAutoplay\";\nimport { YEAR_OPTS } from \"../../constants\";\n\nconst Autoplay = ({ setYear, year, play }) => {\n  const [playing, setPlaying] = useState(play);\n\n  useAutoplay(() => {\n    if (playing) {\n      if (year === YEAR_OPTS[YEAR_OPTS.length - 1].value) {\n        setYear(YEAR_OPTS[0].value);\n      } else {\n        setYear(year + 1);\n      }\n    }\n  }, 1000);\n\n  return (\n    <button\n      data-tip=\"Play all years\"\n      className={playing ? \"tab-active\" : \"tab-btn\"}\n      onClick={() => setPlaying(!playing)}\n    >\n      <FaPlay />\n    </button>\n  );\n};\n\nexport default Autoplay;\n","import { useCallback } from \"react\";\nimport Autoplay from './Autoplay';\n\nconst YearSelector = ({ options, selected, setSelected, }) => {\n  const setClass = useCallback(\n    (method) => {\n      return selected === method ? \"tab-active\" : \"tab-btn\";\n    },\n    [selected]\n  );\n\n  return (\n    <div className={\"tab year-selector\"}>\n      {options.map((opt) => (\n        <button\n          key={opt.value}\n          className={setClass(opt.value)}\n          onClick={() => setSelected(opt.value)}\n        >\n          {opt.label}\n        </button>\n      ))}\n      <Autoplay setYear={setSelected} year={selected} play={false} />\n    </div>\n  );\n};\n\nexport default YearSelector;\n","import { Doughnut } from \"react-chartjs-2\";\nimport { COUNTRY_COLORS } from \"../../constants\";\n\nconst DoughnutChart = ({ countries, codes }) => {\n\n  const filteredCountries = Object.keys(countries[0].data).filter(\n    (x) => countries[0].data[x]\n  );\n\n  // Remove own country\n  countries[0].data[countries[0].geo.properties.ISO_A2] = null;\n\n  const data = {\n    labels: filteredCountries.map(country => codes[country]),\n    datasets: [\n      {\n        label: `Outgoing passengers from ${countries[0].geo.properties.NAME}`,\n        data: Object.values(countries[0].data).filter((x) => x),\n        datasetKeyProvider: () => countries[0].geo.properties.NAME,\n        backgroundColor: (chart) => COUNTRY_COLORS[filteredCountries[chart.dataIndex]],\n        borderColor: (chart) => COUNTRY_COLORS[filteredCountries[chart.dataIndex]],\n        borderWidth: 1,\n      },\n    ],\n  };\n  const options = {\n    animation: {\n      duration: 0\n    },\n    legend: { display: false },\n  };\n\n  return <Doughnut options={options} data={data} />;\n};\n\nexport default DoughnutChart;\n","import { Bar } from \"react-chartjs-2\";\nimport { YEAR_OPTS } from \"../../constants\";\nimport { COUNTRY_COLORS } from \"../../constants\";\n\nconst StackedBarChart = ({ dataset, countryCode, codes, transport }) => {\n  const countries = Object.keys(dataset[YEAR_OPTS[0].value]);\n\n  const datasets = countries.map((country, idx) => {\n    const years = [];\n\n    YEAR_OPTS.forEach(({ value }) => {\n      // Remove own country\n      if (country === countryCode) return;\n\n      if (dataset?.[value]?.[countryCode]?.[country]) {\n        years.push(dataset[value][countryCode][country]);\n      }\n    });\n\n    return {\n      key: `${country}-${idx}`,\n      label: codes[country],\n      data: years,\n      backgroundColor: COUNTRY_COLORS[country],\n    };\n  });\n\n  const data = {\n    labels: YEAR_OPTS.map((year) => year.value),\n    datasets: datasets,\n  };\n\n  const options = {\n    legend: { display: false },\n    scales: {\n      yAxes: [\n        {\n          gridLines: {\n            color: \"#404040\",\n          },\n          stacked: true,\n          ticks: {\n            callback: function (value, index, values) {\n              if (value / 1000000 >= 1) return `${value / 1000000}M`;\n              else return `${value / 1000}K`;\n            },\n            beginAtZero: true,\n            fontColor: \"lightgrey\",\n          },\n          scaleLabel: {\n            display: false,\n            labelString: \"number of passengers\",\n            fontColor: \"lightgrey\",\n          },\n        },\n      ],\n      xAxes: [\n        {\n          gridLines: {\n            color: \"#404040\",\n          },\n          stacked: true,\n          ticks: {\n            fontColor: \"lightgrey\",\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <Bar\n      options={options}\n      data={data}\n      datasetKeyProvider={(d) => d.key}\n    />\n  );\n};\n\nexport default StackedBarChart;\n","import DoughnutChart from \"./DoughnutChart\";\nimport StackedBarChart from \"./StackedBarChart\";\n\nconst Sidebar = ({ countries, dataset, codes, year, transport }) => {\n  // Do not render if coming from About without any country selected\n  if(countries.length === 0) return false;\n\n  const countryInfo = countries[0]?.geo.properties;\n  const countryCode = countries[0]?.ISO;\n  const cc = countryCode === 'UK' ? 'GB' : countryCode;\n  const imgUrl = `https://www.countryflags.io/${cc}/flat/64.png`;\n  const total = Object.values(countries[0].data).reduce((acc, amount) => {\n    return (acc += amount);\n  }, 0);\n  \n  function ShowDoughnutChart() {\n    return (year === 2020 && transport === 'train') ?\n      <p className=\"notAvailable\">No data available for train trips in 2020</p> :\n      <DoughnutChart countries={countries} codes={codes} />\n  }\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"countryNameContainer\">\n        <img alt={countryInfo.NAME} src={imgUrl}></img>\n        <h2>{countries[0]?.geo.properties.NAME}</h2>\n      </div>\n      <div className=\"sidebarContent\">\n        <div className=\"indicatorContainer\">\n          <div>\n            <h2>{(countryInfo.POP_EST / 1000000).toFixed(2)}M</h2>\n            <p>\n              Population\n            </p>\n          </div>\n          <div className=\"indicator\">\n            <h2>{(total/1000000).toFixed(2)}M</h2>\n            <p>\n              Outgoing passengers\n            </p>\n          </div>\n        </div>\n        <div>\n          <h5>Outgoing passengers from {countryInfo.NAME}</h5>\n          <ShowDoughnutChart />\n        </div>\n        <div>\n          <h5>Outgoing passengers by year</h5>\n          <StackedBarChart dataset={dataset} countryCode={countryCode} codes={codes} transport={transport} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","export default __webpack_public_path__ + \"static/media/fabian.8d90f093.png\";","export default __webpack_public_path__ + \"static/media/david.68c4a30e.png\";","export default __webpack_public_path__ + \"static/media/yan.7b480088.png\";","export default __webpack_public_path__ + \"static/media/gonzalo.a9c41d65.png\";","import data from \"../../about.json\";\n\nimport fabian from \"../../assets/imgs/fabian.png\";\nimport david from \"../../assets/imgs/david.png\";\nimport yan from \"../../assets/imgs/yan.png\";\nimport gonzalo from \"../../assets/imgs/gonzalo.png\";\n\nconst About = () => {\n  const imgs = { fabian, david, yan, gonzalo };\n\n  // const getContributionsData = useCallback(\n  //   (contributions) => ({\n  //     labels: Object.keys(contributions),\n  //     datasets: [\n  //       {\n  //         label: `Contributions to the project`,\n  //         data: Object.values(contributions),\n  //         backgroundColor: (chart) =>\n  //           Object.values(COUNTRY_COLORS)[chart.dataIndex],\n  //         borderColor: (chart) =>\n  //           Object.values(COUNTRY_COLORS)[chart.dataIndex],\n  //         borderWidth: 1,\n  //       },\n  //     ],\n  //   }),\n  //   []\n  // );\n\n  // const options = {\n  //   legend: {\n  //     display: false,\n  //     labels: {\n  //       fontColor: \"white\",\n  //     },\n  //   },\n  //   scales: {\n  //     xAxes: [\n  //       {\n  //         ticks: {\n  //           beginAtZero: true,\n  //         },\n  //       },\n  //     ],\n  //   },\n  // };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"countryNameContainer\">\n        <h2>The Eurotransit project</h2>\n      </div>\n      <div className=\"aboutSidebarContent\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            paddingTop: \"20px\",\n            paddingLeft: \"10px\",\n          }}\n        >\n          <h3>About us</h3>\n          {data.people.map((person) => (\n            <div key={person.name} className=\"people-container\">\n              <div>\n                <div className=\"img-container\">\n                  <img alt=\"profile\" src={imgs[person.image]} />\n                </div>\n                <div className=\"info-container\">\n                  <div className=\"name\">{person.name}</div>\n                  <a className=\"mail link\" href={`mailto: ${person.email}`}>\n                    <u>{person.email}</u>\n                  </a>\n                </div>\n              </div>\n              {/* <HorizontalBar\n              data={getContributionsData(person.contributions)}\n              options={options}\n            /> */}\n            </div>\n          ))}\n          <h3>About the project</h3>\n          <div className=\"text\">\n            Travelling within the European Union has become a major part of\n            citizen’s lives. With more and more routes and connections being\n            available, it has become very easy for people to travel from and to\n            different countries. Eurotransit is an interactive web application\n            that visualizes this air and rail passenger data between EU\n            countries. The goal of this project not only was to explore\n            different correlations and relationships among states within the\n            European Union in regard to travel preferences but also to display\n            changes in international passenger flows over the course of the last\n            couple of years.\n          </div>\n          <h3>Contributions</h3>\n          {/* @TODO delete */}\n          <div className=\"text\">\n            <ul>\n              <li>\n                <b>Fabian: </b>UI Design, data cleaning, front-end.\n              </li>\n              <li>\n                <b>Yan: </b>Statistics, data cleaning, front-end.\n              </li>\n              <li>\n                <b>David: </b>UX Design & development, data cleaning, project management, deployment.\n              </li>\n              <li>\n                <b>Gonzalo: </b>Data cleaning, frontend, React Simple Maps.\n              </li>\n            </ul>\n          </div>\n          <h3>Demo Video</h3>\n          <div className=\"text\">\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://www.youtube.com/watch?v=4q7Ijjh7vIM\"\n            >\n              Watch it on YouTube\n            </a>\n          </div>\n          <h3>Data provenance</h3>\n          <p>From Eurostat, the European Statistical Office: <br />\n            <a href=\"https://ec.europa.eu/eurostat/web/transport/data/database\">https://ec.europa.eu/eurostat/web/transport/data/database</a><br /><br /></p>\n          <div className=\"text\">\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing?file=data/avia_paocc.tsv.gz\"\n            >\n              Air passenger transport (TSV)\n            </a>\n            <p>\n              The first dataset that was utilized consists of data regarding transportation by air between different countries within the European Union. Overall, this dataset consists of 3128542 values. Variables include for example units of measurement, country of origin, country of destination, or different years ranging from 2020 all the way back to 1993 as well as specific countries. However, data is only available starting from 2003. Within the cells, the number of passengers is displayed.\n            </p>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing?file=data/rail_pa_intgong.tsv.gz\"\n            >\n              Rail passenger transport (TSV)\n            </a>\n            <p>\n              The second dataset is quite similar to the first one, except it represents data in relation to the transportation of passengers within the European Union with trains. It consists of 9321 values; the variables include for example unit of measurement, country of origin, country of destination, or years ranging from 2019 back to 2004. The number of passengers is displayed within the cells.\n            </p>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing?file=data/rail_pa_quartal.tsv.gz\"\n            >\n              Rail passenger transport 2020 (TSV)\n            </a>\n            <p>\n              The third dataset is used to complete the train trips with data for 2020 which was missing in the aforementioned. It contains 4398 rows but only a few were used for our purpose. This dataset served as a patch to have some information to show for 2020 in terms of trains but it hasn’t been the perfect match. We therefore are not able to display links between countries of origin and countries of destination for trains 2020 in the website.\n            </p>\n          </div>\n          <h3>Achieved learning objectives</h3>\n          <div className=\"text\">\n            <ul>\n              <li>Finding applicable datasets.\n              </li>\n              <li>Cleaning, sorting, and optimizing datasets so that they can be utilized.\n              </li>\n              <li>Understanding user needs and designing prototypes accordingly.\n              </li>\n              <li>Determining distinct and appropriate ways to visualize specific data.\n              </li>\n              <li>Identifying and developing adequate interactions to effectively visualize large amounts of data.\n              </li>\n              <li>Working with React to build an interactive web application that enables users to gain a good understanding of the data at hand through visual mappings, data transformations, and view transformations.\n              </li>\n              <li>Utilizing and understanding the visualization pipeline and libraries.\n              </li>\n              <li>Taking external feedback and implementing fixes.\n              </li>\n            </ul>\n          </div>\n          <h3>Other references</h3>\n          <div className=\"text\">\n            <ul>\n              <li>\n                Tirachini, Alejandro {\"&\"} Cats, Oded. 2020. COVID-19 and Public Transportation: Current Assessment, Prospects, and Research Needs. Journal of Public Transportation, 22 (1): <a href=\"https://doi.org/10.5038/2375-0901.22.1.1\"> https://doi.org/10.5038/2375-0901.22.1.1</a>\n              </li>\n              <li>\n                Nižetić, S. Impact of coronavirus (COVID‐19) pandemic on air transport mobility, energy, and environment: A case study. Int J Energy Res. 2020; 44: 10953– 10961. <a href=\"https://doi.org/10.1002/er.5706\"> https://doi.org/10.1002/er.5706</a>\n              </li>\n              <li>\n                Rich Harris, Blacki Migliozzi, and Niraj Chokshi. 2020. 13,000 missing Flights: The global consequences of THE CORONAVIRUS. Retrieved from <a href=\"https://www.nytimes.com/interactive/2020/02/21/business/coronavirus-airline-travel.html\">The New York Times</a>.\n              </li>\n              <li>\n                European Commission. 2018. Atlas of the Sky. Retrieved from <a href=\"https://ec.europa.eu/transport/modes/air/aos/aos_public.html\">European Commission</a>.\n              </li>\n            </ul>\n          </div>\n          <h3>Repository</h3>\n          <div className=\"text\">\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://github.com/dvcarrillo/eurotransit\"\n            >\n              github.com/dvcarrillo/eurotransit\n            </a>\n          </div>\n          <h3>Third party libraries</h3>\n          <div className=\"text\">\n            <span>Made with </span>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://reactjs.org/\"\n            >\n              React.js\n            </a>\n            <span>, </span>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://www.chartjs.org/docs/latest/\"\n            >\n              Chart.js\n            </a>\n            <span> and </span>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://www.react-simple-maps.io/\"\n            >\n              React Simple Maps\n            </a>\n            .<span> You can fork Eurotransit on our repository above :)</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Line,\n} from \"react-simple-maps\";\nimport geodata from \"../../geo.json\";\nimport theme from \"../../theme.json\";\n\nconst MapChart = ({\n  dataset,\n  colorSet,\n  scale,\n  limits,\n  transport,\n  selectedCountries,\n  setHoveredCountry,\n  setHoveredLink,\n  setSelected,\n}) => {\n  const getAcc = (data) => {\n    const amount = data\n      ? Object.values(data).reduce((acc, v) => acc + v || 0, 0)\n      : 0;\n    return amount;\n  };\n  const isSelected = (geo) =>\n    selectedCountries?.find((c) => c.ISO === geo.properties.ISO_A2);\n  const getCentroid = (data) => {\n    if (!data) return [0, 0];\n    const sum = data.reduce(\n      (acc, coord) => {\n        acc.x += coord[0];\n        acc.y += coord[1];\n        return acc;\n      },\n      { x: 0, y: 0 }\n    );\n    return [sum.x / data.length, sum.y / data.length];\n  };\n\n  return (\n    <div className=\"map-chart\">\n      <ComposableMap\n        data-tip=\"\"\n        projection=\"geoAzimuthalEqualArea\"\n        projectionConfig={{\n          rotate: [-15.0, -47.0, 0],\n          scale: 500,\n        }}\n      >\n        <ZoomableGroup>\n          <Geographies geography={geodata}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const amount = getAcc(dataset[geo.properties.ISO_A2]);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    stroke={colorSet.background}\n                    onClick={() => {\n                      if (!dataset[geo.properties.ISO_A2]) return;\n                      setSelected([\n                        {\n                          geo,\n                          ISO: geo.properties.ISO_A2,\n                          data: dataset[geo.properties.ISO_A2],\n                        },\n                      ]);\n                    }}\n                    onMouseEnter={() => {\n                      setHoveredCountry({\n                        geo,\n                        ISO: geo.properties.ISO_A2,\n                        data: dataset[geo.properties.ISO_A2],\n                      });\n                    }}\n                    onMouseLeave={() => {\n                      setHoveredCountry(null);\n                    }}\n                    style={{\n                      default: {\n                        fill: dataset[geo.properties.ISO_A2]\n                          ? isSelected(geo)\n                            ? colorSet.UIAccent\n                            : scale(amount)\n                          : colorSet.disabled,\n                        opacity: 1,\n                        outline: \"none\",\n                        transition: \"300ms\",\n                      },\n                      hover: {\n                        fill: dataset[geo.properties.ISO_A2]\n                          ? colorSet.UIAccent\n                          : colorSet.disabled,\n                        outline: \"none\",\n                        cursor: \"pointer\",\n                      },\n                      pressed: {\n                        fill: colorSet.UIAccent,\n                        outline: \"none\",\n                      },\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n          <Geographies geography={geodata}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  isSelected(geo) &&\n                  selectedCountries.map((country) => {\n                    return Object.keys(country.data)\n                      .filter((x) => country.data[x])\n                      .map((target) => {\n                        const country = geographies.find(\n                          (g) => g.properties.ISO_A2 === target\n                        );\n\n                        const originCoords = geo.geometry\n                          .coordinates[0][0][0][0]\n                          ? geo.geometry.coordinates[0][0]\n                          : geo.geometry.coordinates[0];\n\n                        const targetCoords = country?.geometry\n                          .coordinates[0][0][0][0]\n                          ? country?.geometry.coordinates[0][0]\n                          : country?.geometry.coordinates[0];\n\n                        if (!originCoords || !targetCoords) return false;\n\n                        const [max, min] = limits;\n\n                        const diff = max - min;\n\n                        const originName = geo.properties.ISO_A2;\n                        const targetName = country.properties.ISO_A2;\n                        const passengers = dataset[originName][targetName];\n                        const thickness = (passengers * 50) / diff;\n                        const lineWidth =\n                          transport === \"train\" ? thickness / 1.8 : thickness;\n\n                        return (\n                          <Line\n                            key={target}\n                            from={getCentroid(originCoords)}\n                            to={getCentroid(targetCoords)}\n                            stroke=\"#A379C9\"\n                            opacity={0.8}\n                            onMouseEnter={() =>\n                              setHoveredLink({\n                                from: geo.properties,\n                                to: country.properties,\n                                passengers: passengers,\n                              })\n                            }\n                            onMouseLeave={() => setHoveredLink(null)}\n                            strokeWidth={lineWidth < 1 ? 1 : lineWidth}\n                            strokeLinecap=\"round\"\n                          />\n                        );\n                      });\n                  })\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default MapChart;\n","import ReactTooltip from \"react-tooltip\";\nimport styled from \"styled-components\";\n\nexport const ReactTooltipStyled = styled(ReactTooltip)`\n  &.type-dark.place-top {\n    background-color: rgba(0, 0, 0, 0.85);\n    padding: 0.3rem 1rem;\n    border-radius: 0;\n  }\n`;\n\nconst MapTooltip = ({ country, link, transport, year }) => {\n  const tooltipCountryContent = () => {\n    const name = country?.geo.properties.NAME;\n    if (!country.data) {\n      return (\n        <div>\n          <h3>{name}</h3>\n        </div>\n      );\n    }\n    const total = Object.values(country.data).reduce((acc, amount) => {\n      return (acc += amount);\n    }, 0);\n\n    const population = (country.geo.properties.POP_EST / 1000000).toFixed(2);\n    const passengers = (total / 1000000).toFixed(2);\n\n    return (\n      <div>\n        <h3>{name}</h3>\n        <p>\n          Population: <b>{population}M</b>\n        </p>\n        <p>\n          Total passengers leaving by {transport} in {year}:{\" \"}\n          <b>{passengers}M</b>\n        </p>\n      </div>\n    );\n  };\n\n  const tooltipLinkContent = () => {\n    const { from, to, passengers } = link;\n    return (\n      <div>\n        <p>\n          From <b>{from.NAME}</b> to <b>{to.NAME}</b>\n        </p>\n        <p>\n          Number of passengers: <b>{(passengers / 1000000).toFixed(2)}M</b>\n        </p>\n      </div>\n    );\n  };\n\n  const getContent = () => {\n    if (link) {\n      return tooltipLinkContent();\n    } else if (country) {\n      return tooltipCountryContent();\n    } else {\n      return;\n    }\n  };\n\n  return <ReactTooltipStyled>{getContent()}</ReactTooltipStyled>;\n};\n\nexport default MapTooltip;\n","const Overlay = () => (\n  <div\n    style={{\n      backgroundColor: \"rgba(0,0,0,0.3)\",\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\",\n    }}\n  />\n);\n\nexport default Overlay;\n","import { useState, useEffect } from \"react\";\nimport { FiChevronLeft } from \"react-icons/fi\";\n\nconst SidebarContainer = ({ open, onClose, sidebarContent, mainContent, about }) => {\n  const [opened, setOpened] = useState(false);\n\n  useEffect(() => {\n    setOpened(open);\n  }, [open]);\n\n  const close = () => {\n    setOpened(false);\n    onClose();\n  }\n\n  return (\n    <div className=\"sidebar-container\">\n      {opened && (\n        <div className=\"sidebar-left\">\n          {!about && <div className=\"close\" onClick={close}>\n            <FiChevronLeft />\n          </div>}\n          {sidebarContent}\n        </div>\n      )}\n      <div className=\"sidebar-right\">\n        {mainContent}\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarContainer;\n","import { useMemo } from \"react\";\n\nconst useDatasetsLimits = (data) => {\n  const limits = useMemo(() => {\n    let max = -Infinity;\n    let min = Infinity;\n    Object.values(data).forEach((year) => {\n      return Object.values(year).forEach((country) => {\n        let all = 0;\n        Object.values(country).forEach((val) => {\n          if(val) all+=val;\n        })\n        if (all) {\n          max = Math.max(all, max);\n          min = Math.min(all, min);\n        }\n      }\n      );\n    });\n    return [max, min];\n  }, [data]);\n\n  return limits;\n};\n\nexport default useDatasetsLimits;\n","import theme from \"../../src/theme.json\";\n\nconst useColorSet = (transport) => {\n    // keyvalue with all the colors\n    let colorSet = {\n        background: \"black\",\n        UIAccent: \"black\",\n        disabled: \"black\"\n    }\n\n    const isInDarkMode = () => {\n        return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n\n    colorSet.background = isInDarkMode() ? theme.map.background.dark : theme.map.background.light;\n    colorSet.UIAccent = (transport == 'plane') ? theme.UI.accent.plane : theme.UI.accent.train;\n    colorSet.disabled = (() => {\n        if (transport == 'plane') {\n            if (isInDarkMode()) {\n                return theme.map.plane.disabled_dark;\n            }\n            else {\n                return theme.map.plane.disabled_light;\n            }\n        }\n        else {\n            if (isInDarkMode()) {\n                return theme.map.train.disabled_dark;\n            }\n            else {\n                return theme.map.train.disabled_light;\n            }\n        }\n    })();\n\n    return colorSet;\n}\n\nexport default useColorSet;\n","import React from \"react\";\nimport chroma from \"chroma-js\";\n\nimport theme from \"../../src/theme.json\";\n\nconst Legend = ({ limits, transportation }) => {\n  const [max, min] = limits\n  const range = [theme.map[transportation].min, theme.map[transportation].max];\n  const color_range = chroma.scale(range).domain([min, max]).colors(8);\n  return (\n    <div className=\"legend\">\n      <h3>Legend</h3>\n      <div className=\"legend__colors\">\n        {color_range.map((opt) => (\n          <div style={{ backgroundColor: opt, width: \"30px\", height: \"10px\" }}></div>\n        ))}\n      </div>\n      <div className=\"legend__description\">\n        <div className=\"legend__text\">{transportation == 'plane' ? (min / 1000).toFixed(0) : min}{transportation == 'plane' ? 'K' : ''} passengers</div>\n        <div className=\"legend__text\">{(max / 1000000).toFixed(0)}M passengers</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Legend;\n","import { useState, useMemo, useEffect } from \"react\";\nimport chroma from \"chroma-js\";\n\nimport Navbar from \"./main/Navbar\";\nimport YearSelector from \"./main/YearSelector\";\nimport Sidebar from \"./sidebar/Sidebar\";\nimport About from \"./sidebar/About\";\nimport MapChart from \"./main/MapChart\";\nimport MapTooltip from \"./main/MapTooltip\";\nimport Overlay from \"./main/Overlay\";\nimport SidebarContainer from \"./SidebarContainer\";\nimport useDatasetsLimits from \"../hooks/useDatasetLimits\";\nimport useColorSet from \"../hooks/useColorSet\";\nimport Legend from \"./Legend\";\n\nimport theme from \"../../src/theme.json\";\n\nimport { TRANSPORT_OPTS, YEAR_OPTS } from \"../constants\";\n\nconst Main = ({ datasets }) => {\n  const [year, setYear] = useState(YEAR_OPTS[YEAR_OPTS.length - 1].value);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [hoveredLink, setHoveredLink] = useState(null);\n  const [transport, setTransport] = useState(\"plane\");\n  const [about, setAbout0] = useState(false);\n\n  const setAbout = (flag) => {\n    setSelectedCountries([]);\n    setAbout0(flag);\n  };\n\n  const dataset = useMemo(() => datasets[transport][year], [\n    datasets,\n    transport,\n    year,\n  ]);\n\n  const [max, min] = useDatasetsLimits(datasets[transport]);\n\n  const scale = useMemo(() => {\n    const rangeMin =\n      transport == \"plane\" ? theme.map.plane.min : theme.map.train.min;\n    const rangeMax =\n      transport == \"plane\" ? theme.map.plane.max : theme.map.train.max;\n    const range = [rangeMin, rangeMax];\n    return chroma.scale(range).domain([min, max]);\n  }, [max, min]);\n\n  const colorSet = useColorSet(transport);\n\n  useEffect(() => {\n    const countries = selectedCountries.map((country) => {\n      return {\n        ...country,\n        data: dataset[country.ISO],\n      };\n    });\n    setSelectedCountries(countries);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transport, year]);\n\n  return (\n    <SidebarContainer\n      open={about || selectedCountries.length > 0}\n      about={about}\n      onClose={() => {\n        setSelectedCountries([]);\n        setAbout(false);\n      }}\n      sidebarContent={\n        about ? (\n          <About />\n        ) : (\n          <Sidebar\n            dataset={datasets[transport]}\n            countries={selectedCountries}\n            year={year}\n            transport={transport}\n            codes={datasets.codes}\n          />\n        )\n      }\n      mainContent={\n        <div className=\"main\">\n          {about && <Overlay />}\n          {/* <Header /> */}\n          <Navbar\n            selected={transport}\n            setSelected={(method) => setTransport(method)}\n            options={TRANSPORT_OPTS}\n            colorSet={colorSet}\n            setAbout={setAbout}\n            about={about}\n          />\n          <MapChart\n            dataset={dataset}\n            colorSet={colorSet}\n            scale={scale}\n            transport={transport}\n            limits={[max, min]}\n            setHoveredLink={setHoveredLink}\n            hoveredCountry={hoveredCountry}\n            selectedCountries={selectedCountries}\n            setHoveredCountry={setHoveredCountry}\n            setSelected={setSelectedCountries}\n          />\n          <MapTooltip\n            country={hoveredCountry}\n            link={hoveredLink}\n            transport={transport}\n            year={year}\n          />\n          {!about && (\n            <>\n              <YearSelector\n                selected={year}\n                setSelected={setYear}\n                options={YEAR_OPTS}\n              />\n              <Legend\n                limits={[max, min]}\n                theme={theme}\n                transportation={transport}\n              />\n            </>\n          )}\n        </div>\n      }\n    />\n  );\n};\n\nexport default Main;\n","const Loading = () => {\n  return <h2 id=\"loadingText\">eurotransit</h2>;\n};\n\nexport default Loading;\n","\nconst Error = () => {\n  return (\n    <div>\n      <h2>eurotransit</h2>\n      <p>[eurotransit is not available right now. Please try again later]</p>\n    </div>\n  );\n};\n\nexport default Error;\n","import { DATASETS } from \"./constants\";\n\nexport const formatData = (dataset) => {\n  const [header, ...data] = dataset.content;\n  const meta = [\"origin\", \"destination\"];\n\n  // Locate origin and destination columns;\n  const origin = header.indexOf(meta[0]);\n  const destination = header.indexOf(meta[1]);\n\n  // Locate years\n  const years = header.filter((x) => !meta.includes(x));\n\n  // Create object with the available years;\n  const formated = years.reduce((acc, year) => {\n    acc[year] = {};\n    return acc;\n  }, {});\n\n  const parseVal = (v) => (isNaN(Number(v)) ? null : Number(v));\n\n  // Fill object;\n  Object.keys(formated).forEach((year) => {\n    const yearIdx = header.indexOf(year);\n\n    data.forEach((row) => {\n      if (row[destination] === undefined) return; // weird error in a ds;\n\n      if (row[origin] in formated[year]) {\n        formated[year][row[origin]][row[destination]] = parseVal(row[yearIdx]);\n      } else {\n        formated[year][row[origin]] = {\n          [row[destination]]: parseVal(row[yearIdx]),\n        };\n      }\n    });\n  });\n\n  return {\n    content: formated,\n    dataset: dataset.dataset,\n  };\n};\n\nconst formatCC = (codesDataset) => {\n  // eslint-disable-next-line no-unused-vars\n  const [_trash, ...data] = codesDataset.content;\n  const formatted = Object.values(data).reduce((acc, country) => {\n    acc[country[1]] = country[0];\n    return acc;\n  }, {});\n\n  return { ...codesDataset, content: formatted };\n};\n\nexport const mergeDatasets = (datasets) => {\n  const planes = datasets.find((ds) => ds.dataset === DATASETS.planes);\n  const trainBig = datasets.find((ds) => ds.dataset === DATASETS.train);\n  const train2020 = datasets.find((ds) => ds.dataset === DATASETS.train2020);\n  const codes = datasets.find((ds) => ds.dataset === DATASETS.codes);\n\n  return {\n    plane: planes.content,\n    train: { ...trainBig.content, ...train2020.content },\n    codes: codes.content,\n  };\n};\n\nexport const formatDataSets = (datasets) => {\n  const countryCodes = datasets.filter((x) => x.dataset === DATASETS.codes);\n  const rest = datasets.filter((x) => x.dataset !== DATASETS.codes);\n  const formated = rest.map(formatData);\n  const countryCodesFormatted = formatCC(...countryCodes);\n  const all = [countryCodesFormatted, ...formated];\n  const merged = mergeDatasets(all);\n\n  // FIXME: shitty fix to remove countries in trains that are not in planes\n  const countries = Object.keys(merged.plane[2020]);\n  Object.values(merged.train).forEach((year) => {\n    Object.keys(year).forEach((country) => {\n      if (!countries.includes(country)) {\n        delete year[country];\n      }\n    });\n  });\n  // -----------------------------------------------------------------------\n\n  return merged;\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { parse } from \"papaparse\";\n\nimport { BASE_URL, DATASETS } from \"../constants\";\nimport { formatDataSets } from \"../utils\";\n\nconst useDatasets = () => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const format = useCallback((ds) => formatDataSets(ds), []);\n\n  const handleError = (err) => {\n    setError(err);\n    console.error(\"Error retrieving the data:\", err);\n  };\n\n  useEffect(() => {\n    const promises = Object.values(DATASETS).map((dataset) =>\n      fetch(BASE_URL + dataset)\n        .then((response) => response.text())\n        .then(async (v) => {\n          const parsed = await parse(v);\n          return {\n            res: parsed,\n            name: dataset,\n          };\n        })\n        .catch(handleError)\n    );\n\n    Promise.all(promises)\n      .then((res) => {\n        const errors = res.filter((x) => x.res.errors.length > 0);\n        const isError = errors.length > 0;\n\n        if (isError) {\n          handleError(errors);\n        } else {\n          const data = res.map((x) => ({\n            content: x.res.data,\n            dataset: x.name,\n          }));\n          setTimeout(() => {\n            const formated = format(data);\n            setData(formated);\n          }, 1500);\n        }\n      })\n      .catch(handleError);\n  }, [format]);\n\n  return [data, error];\n};\n\nexport default useDatasets;\n","import Main from \"./components/Main\";\nimport Loading from \"./components/Loading\";\nimport Error from \"./components/Error\";\nimport useColorSet from \"./hooks/useColorSet\"\nimport useDatasets from \"./hooks/useDatasets\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [data, error] = useDatasets();\n  const bgMode = {\n    background: useColorSet(\"plane\").background\n  };\n  return (\n    <div className=\"App\" style={bgMode}>\n      {error ? <Error /> : data ? <Main datasets={data} /> : <Loading />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}