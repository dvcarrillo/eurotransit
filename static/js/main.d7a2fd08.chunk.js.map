{"version":3,"sources":["components/main/Navbar.jsx","hooks/useAutoplay.jsx","constants.js","components/main/Autoplay.jsx","components/main/YearSelector.jsx","components/sidebar/DoughnutChart.jsx","components/sidebar/StackedBarChart.jsx","components/sidebar/Sidebar.jsx","assets/imgs/fabian.png","assets/imgs/david.png","assets/imgs/yan.png","assets/imgs/gonzalo.png","components/sidebar/About.jsx","components/main/MapChart.jsx","components/main/MapTooltip.jsx","components/SidebarContainer.jsx","hooks/useDatasetLimits.jsx","hooks/useColorSet.jsx","components/Main.jsx","components/Loading.jsx","components/Error.jsx","utils.js","hooks/useDatasets.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Navbar","options","selected","setSelected","setAbout","about","setClass","useCallback","method","className","map","opt","value","onClick","label","useAutoplay","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","DATASETS","train2020","planes","train","codes","TRANSPORT_OPTS","YEAR_OPTS","Array","from","length","_","i","year","COUNTRY_COLORS","AT","BE","BG","CH","CY","CZ","DE","DK","EE","EL","ES","FI","FR","HR","HU","IE","IS","IT","LT","LU","LV","ME","MK","MT","NL","NO","PL","PT","RO","RS","SE","SI","SK","TR","UK","Autoplay","setYear","play","useState","playing","setPlaying","data-tip","YearSelector","DoughnutChart","countries","filteredCountries","Object","keys","data","filter","x","geo","properties","ISO_A2","labels","country","datasets","NAME","values","datasetKeyProvider","backgroundColor","chart","dataIndex","borderColor","borderWidth","animation","duration","legend","display","StackedBarChart","dataset","countryCode","transport","idx","years","forEach","push","key","scales","yAxes","gridLines","color","stacked","ticks","index","beginAtZero","fontColor","scaleLabel","labelString","xAxes","Sidebar","countryInfo","ISO","imgUrl","total","reduce","acc","amount","ShowDoughnutChart","alt","src","POP_EST","toFixed","About","imgs","fabian","david","yan","gonzalo","style","flexDirection","paddingTop","paddingLeft","people","person","image","name","href","email","target","rel","MapChart","colorSet","scale","limits","selectedCountries","setHoveredCountry","isSelected","find","c","getCentroid","sum","coord","y","projection","projectionConfig","rotate","geography","geodata","geographies","v","stroke","background","onMouseEnter","onMouseLeave","default","fill","UIAccent","disabled","opacity","outline","transition","hover","cursor","pressed","rsmKey","g","originCoords","geometry","coordinates","targetCoords","diff","originName","targetName","thickness","lineWidth","to","strokeWidth","strokeLinecap","ReactTooltipStyled","styled","ReactTooltip","MapTooltip","population","passengers","tootipContent","SidebarContainer","open","onClose","sidebarContent","mainContent","opened","setOpened","useDatasetsLimits","useMemo","max","Infinity","min","all","val","Math","useColorSet","isInDarkMode","window","matchMedia","matches","theme","dark","light","UI","accent","plane_trips","train_trips","disabled_dark","disabled_light","Main","setSelectedCountries","hoveredCountry","setTransport","setAbout0","flag","range","chroma","domain","Loading","Error","formatData","content","header","meta","origin","indexOf","destination","formated","includes","parseVal","isNaN","Number","yearIdx","row","undefined","formatCC","codesDataset","formatted","formatDataSets","countryCodes","merged","ds","trainBig","plane","mergeDatasets","useDatasets","setData","error","setError","format","handleError","err","console","promises","fetch","then","response","text","a","parse","parsed","res","catch","Promise","errors","setTimeout","App","bgMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7a2fd08.chunk.js","sourcesContent":["import { useCallback } from \"react\";\n\nconst Navbar = ({ options, selected, setSelected, setAbout, about}) => {\n  const setClass = useCallback(\n    (method) => {\n      return selected === method ? \"tab-nav-active\" : \"tab-nav-btn\";\n    },\n    [selected]\n  );\n\n  return (\n    <div className={\"tab navbar\"}>\n      <div className=\"appTitle\">\n        <h4>eurotransit</h4>\n      </div>\n      <div className=\"verticalBar\"></div>\n      {options.map((opt) => (\n        <button\n          key={opt.value}\n          className={setClass(opt.value)}\n          onClick={() => {\n            setAbout(false);\n            setSelected(opt.value);\n          }}\n        >\n          {opt.label}\n        </button>\n      ))}\n      <button\n        key='about'\n        className={`tab-nav-${about ? \"active\" : \"btn\"}`}\n        onClick={() => setAbout(true)}\n      >\n        About\n      </button>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { useRef, useEffect } from \"react\";\n\nconst useAutoplay = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => savedCallback.current();\n    \n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useAutoplay;\n\n","export const BASE_URL =\n  \"https://raw.githubusercontent.com/dvcarrillo/eurotransit/dev/datasets/\";\n\nexport const DATASETS = {\n  train2020: \"rail_passengers_2020_cleaned.csv\",\n  planes: \"cleaned_planes.csv\",\n  train: \"rail_trips_cleaned.csv\",\n  codes:\"country_codes.csv\",\n};\n\nexport const TRANSPORT_OPTS = [\n  { value: \"plane\", label: \"Plane trips\" },\n  { value: \"train\", label: \"Train trips\" },\n];\n\nexport const YEAR_OPTS = Array.from(\n  { length: 2020 - 2004 + 1 },\n  (_, i) => 2004 + i\n).map((year) => ({\n  value: year,\n  label: year,\n}));\n\n\nexport const COUNTRY_COLORS = {\n  AT: '#A5D6A7',\n  BE: '#B3E5FC',\n  BG: '#E57373',\n  CH: '#81C784',\n  CY: '#FFF176',\n  CZ: '#BA68C8',\n  DE: '#64B5F6',\n  DK: '#DCE775',\n  EE: '#FFB74D',\n  EL: '#7986CB',\n  ES: '#4DB6AC',\n  FI: '#F06292',\n  FR: '#4DD0E1',\n  HR: '#FF8A65',\n  HU: '#4FC3F7',\n  IE: '#FFD54F',\n  IS: '#AED581',\n  IT: '#9575CD',\n  LT: '#A1887F',\n  LU: '#C62828',\n  LV: '#2E7D32',\n  ME: '#F9A825',\n  MK: '#6A1B9A',\n  MT: '#1565C0',\n  NL: '#9E9D24',\n  NO: '#EF6C00',\n  PL: '#283593',\n  PT: '#00695C',\n  RO: '#AD1457',\n  RS: '#00838F',\n  SE: '#D84315',\n  SI: '#0277BD',\n  SK: '#FF8F00',\n  TR: '#558B2F',\n  UK: '#4527A0',\n}\n","import { useState } from \"react\";\nimport { FaRedo } from \"react-icons/fa\";\n\nimport useAutoplay from \"../../hooks/useAutoplay\";\nimport { YEAR_OPTS } from \"../../constants\";\n\nconst Autoplay = ({ setYear, year, play }) => {\n  const [playing, setPlaying] = useState(play);\n\n  useAutoplay(() => {\n    if (playing) {\n      if (year === YEAR_OPTS[YEAR_OPTS.length - 1].value) {\n        setYear(YEAR_OPTS[0].value);\n      } else {\n        setYear(year + 1);\n      }\n    }\n  }, 1000);\n\n  return (\n    <button\n      data-tip=\"Auto play\"\n      className={playing ? \"tab-active\" : \"tab-btn\"}\n      onClick={() => setPlaying(!playing)}\n    >\n      <FaRedo />\n    </button>\n  );\n};\n\nexport default Autoplay;\n","import { useCallback } from \"react\";\nimport Autoplay from './Autoplay';\n\nconst YearSelector = ({ options, selected, setSelected, }) => {\n  const setClass = useCallback(\n    (method) => {\n      return selected === method ? \"tab-active\" : \"tab-btn\";\n    },\n    [selected]\n  );\n\n  return (\n    <div className={\"tab year-selector\"}>\n      {options.map((opt) => (\n        <button\n          key={opt.value}\n          className={setClass(opt.value)}\n          onClick={() => setSelected(opt.value)}\n        >\n          {opt.label}\n        </button>\n      ))}\n      <Autoplay setYear={setSelected} year={selected} play={false} />\n    </div>\n  );\n};\n\nexport default YearSelector;\n","import { Doughnut } from \"react-chartjs-2\";\nimport { COUNTRY_COLORS } from \"../../constants\";\n\nconst DoughnutChart = ({ countries, codes }) => {\n\n  const filteredCountries = Object.keys(countries[0].data).filter(\n    (x) => countries[0].data[x]\n  );\n\n  // Remove own country\n  countries[0].data[countries[0].geo.properties.ISO_A2] = null;\n\n  const data = {\n    labels: filteredCountries.map(country => codes[country]),\n    datasets: [\n      {\n        label: `Outgoing passengers from ${countries[0].geo.properties.NAME}`,\n        data: Object.values(countries[0].data).filter((x) => x),\n        datasetKeyProvider: () => countries[0].geo.properties.NAME,\n        backgroundColor: (chart) => COUNTRY_COLORS[filteredCountries[chart.dataIndex]],\n        borderColor: (chart) => COUNTRY_COLORS[filteredCountries[chart.dataIndex]],\n        borderWidth: 1,\n      },\n    ],\n  };\n  const options = {\n    animation: {\n      duration: 0\n    },\n    legend: { display: false },\n  };\n\n  return <Doughnut options={options} data={data} />;\n};\n\nexport default DoughnutChart;\n","\nimport { Bar } from \"react-chartjs-2\";\nimport { YEAR_OPTS } from \"../../constants\";\nimport { COUNTRY_COLORS } from \"../../constants\";\n\nconst StackedBarChart = ({ dataset, countryCode, codes, transport }) => {\n  const countries = Object.keys(dataset[YEAR_OPTS[0].value]);\n\n  const datasets = countries.map((country, idx) => {\n\n    const years = [];\n\n    YEAR_OPTS.forEach(({ value }) => {\n\n      // Remove own country\n      if (country === countryCode) return;\n\n      if (dataset?.[value]?.[countryCode]?.[country]) {\n        years.push(dataset[value][countryCode][country]);\n      }\n    });\n\n    return {\n      key: `${country}-${idx}`,\n      label: codes[country],\n      data: years,\n      backgroundColor: COUNTRY_COLORS[country],\n    }\n  });\n\n  const data = {\n    labels: YEAR_OPTS.map((year) => year.value),\n    datasets: datasets\n  };\n\n  const options = {\n    legend: { display: false },\n    scales: {\n      yAxes: [\n        {\n          gridLines: {\n            color: '#404040'\n          },\n          stacked: true,\n          ticks: {\n            callback: function (value, index, values) {\n              if((value / 1000000) >= 1) return `${value / 1000000}M`;\n              else return `${value / 1000}K`;\n            },\n            beginAtZero: true,\n            fontColor: \"lightgrey\"\n          },\n          scaleLabel: {\n            display: false,\n            labelString: 'number of passengers',\n            fontColor: \"lightgrey\"\n          }\n        },\n      ],\n      xAxes: [\n        {\n          gridLines: {\n            color: '#404040'\n          },\n          stacked: true,\n          ticks: {\n            fontColor: \"lightgrey\"\n          },\n        },\n      ],\n    },\n  };\n\n  return <Bar options={options} data={data} />;\n};\n\nexport default StackedBarChart;\n","import DoughnutChart from \"./DoughnutChart\";\nimport StackedBarChart from \"./StackedBarChart\";\n\nconst Sidebar = ({ countries, dataset, codes, year, transport }) => {\n  // Do not render if coming from About without any country selected\n  if(countries.length === 0) return false;\n\n  const countryInfo = countries[0]?.geo.properties;\n  const countryCode = countries[0]?.ISO;\n  const cc = countryCode === 'UK' ? 'GB' : countryCode;\n  const imgUrl = `https://www.countryflags.io/${cc}/flat/64.png`;\n  const total = Object.values(countries[0].data).reduce((acc, amount) => {\n    return (acc += amount);\n  }, 0);\n  \n  function ShowDoughnutChart() {\n    return (year === 2020 && transport === 'train') ?\n      <p className=\"notAvailable\">No data available for train trips in 2020</p> :\n      <DoughnutChart countries={countries} codes={codes} />\n  }\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"countryNameContainer\">\n        <img alt={countryInfo.NAME} src={imgUrl}></img>\n        <h2>{countries[0]?.geo.properties.NAME}</h2>\n      </div>\n      <div className=\"sidebarContent\">\n        <div className=\"indicatorContainer\">\n          <div>\n            <h2>{(countryInfo.POP_EST / 1000000).toFixed(2)}M</h2>\n            <p>\n              Population\n            </p>\n          </div>\n          <div className=\"indicator\">\n            <h2>{(total/(countryInfo.POP_EST)).toFixed(2)}M</h2>\n            <p>\n              Passengers per 1M\n            </p>\n          </div>\n        </div>\n        <div>\n          <h5>Outgoing passengers from {countryInfo.NAME}</h5>\n          <ShowDoughnutChart />\n        </div>\n        <div>\n          <h5>Outgoing passengers by year</h5>\n          <StackedBarChart dataset={dataset} countryCode={countryCode} codes={codes} transport={transport} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","export default __webpack_public_path__ + \"static/media/fabian.8d90f093.png\";","export default __webpack_public_path__ + \"static/media/david.68c4a30e.png\";","export default __webpack_public_path__ + \"static/media/yan.7b480088.png\";","export default __webpack_public_path__ + \"static/media/gonzalo.a9c41d65.png\";","import { HorizontalBar } from \"react-chartjs-2\";\nimport { useCallback } from \"react\";\nimport data from \"../../about.json\";\nimport { COUNTRY_COLORS } from \"../../constants\";\n\nimport fabian from \"../../assets/imgs/fabian.png\";\nimport david from \"../../assets/imgs/david.png\";\nimport yan from \"../../assets/imgs/yan.png\";\nimport gonzalo from \"../../assets/imgs/gonzalo.png\";\n\nconst About = () => {\n  const imgs = { fabian, david, yan, gonzalo };\n\n  // const getContributionsData = useCallback(\n  //   (contributions) => ({\n  //     labels: Object.keys(contributions),\n  //     datasets: [\n  //       {\n  //         label: `Contributions to the project`,\n  //         data: Object.values(contributions),\n  //         backgroundColor: (chart) =>\n  //           Object.values(COUNTRY_COLORS)[chart.dataIndex],\n  //         borderColor: (chart) =>\n  //           Object.values(COUNTRY_COLORS)[chart.dataIndex],\n  //         borderWidth: 1,\n  //       },\n  //     ],\n  //   }),\n  //   []\n  // );\n\n  // const options = {\n  //   legend: {\n  //     display: false,\n  //     labels: {\n  //       fontColor: \"white\",\n  //     },\n  //   },\n  //   scales: {\n  //     xAxes: [\n  //       {\n  //         ticks: {\n  //           beginAtZero: true,\n  //         },\n  //       },\n  //     ],\n  //   },\n  // };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"countryNameContainer\">\n        <h2>Eurotransit team</h2>\n      </div>\n      <div className=\"sidebarContent\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            paddingTop: \"20px\",\n            paddingLeft: \"10px\",\n          }}\n        >\n          {data.people.map((person) => (\n            <div key={person.name} className=\"people-container\">\n              <div>\n                <div className=\"img-container\">\n                  <img alt=\"profile\" src={imgs[person.image]} />\n                </div>\n                <div className=\"info-container\">\n                  <div className=\"name\">{person.name}</div>\n                  <a className=\"mail link\" href={`mailto: ${person.email}`}>\n                    <u>{person.email}</u>\n                  </a>\n                </div>\n              </div>\n              {/* <HorizontalBar\n              data={getContributionsData(person.contributions)}\n              options={options}\n            /> */}\n            </div>\n          ))}\n          <div className=\"footer\">\n            <span>Made thanks to </span>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://reactjs.org/\"\n            >\n              React.js\n            </a>\n            <span> and </span>\n            <a\n              className=\"link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://www.chartjs.org/docs/latest/\"\n            >\n              Chart.js\n            </a>\n            .\n            <div>\n              <span>Fork us on our </span>\n              <a\n                className=\"link\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/dvcarrillo/eurotransit\"\n              >\n                Github repository.\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Line,\n} from \"react-simple-maps\";\nimport geodata from \"../../geo.json\";\nimport theme from \"../../theme.json\";\n\nconst MapChart = ({\n  dataset,\n  colorSet,\n  scale,\n  limits,\n  transport,\n  selectedCountries,\n  setHoveredCountry,\n  setSelected,\n}) => {\n  const getAcc = (data) => {\n    const amount = data\n      ? Object.values(data).reduce((acc, v) => acc + v || 0, 0)\n      : 0;\n    return amount;\n  };\n  const isSelected = (geo) =>\n    selectedCountries?.find((c) => c.ISO === geo.properties.ISO_A2);\n  const getCentroid = (data) => {\n    if (!data) return [0, 0];\n    const sum = data.reduce(\n      (acc, coord) => {\n        acc.x += coord[0];\n        acc.y += coord[1];\n        return acc;\n      },\n      { x: 0, y: 0 }\n    );\n    return [sum.x / data.length, sum.y / data.length];\n  };\n\n  return (\n    <div className=\"map-chart\">\n      <ComposableMap\n        data-tip=\"\"\n        projection=\"geoAzimuthalEqualArea\"\n        projectionConfig={{\n          rotate: [-15.0, -47.0, 0],\n          scale: 500,\n        }}\n      >\n        <ZoomableGroup>\n          <Geographies geography={geodata}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const amount = getAcc(dataset[geo.properties.ISO_A2]);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    stroke={colorSet.background}\n                    onClick={() => {\n                      if (!dataset[geo.properties.ISO_A2]) return;\n                      setSelected([\n                        {\n                          geo,\n                          ISO: geo.properties.ISO_A2,\n                          data: dataset[geo.properties.ISO_A2],\n                        },\n                      ]);\n                    }}\n                    onMouseEnter={() => {\n                      setHoveredCountry({\n                        geo,\n                        ISO: geo.properties.ISO_A2,\n                        data: dataset[geo.properties.ISO_A2],\n                      });\n                    }}\n                    onMouseLeave={() => {\n                      setHoveredCountry(null);\n                    }}\n                    style={{\n                      default: {\n                        fill: dataset[geo.properties.ISO_A2]\n                          ? isSelected(geo)\n                            ? colorSet.UIAccent\n                            : scale(amount)\n                          : colorSet.disabled,\n                        opacity: 1,\n                        outline: \"none\",\n                        transition: \"300ms\",\n                      },\n                      hover: {\n                        fill: dataset[geo.properties.ISO_A2]\n                          ? colorSet.UIAccent\n                          : colorSet.disabled,\n                        outline: \"none\",\n                        cursor: \"pointer\",\n                      },\n                      pressed: {\n                        fill: colorSet.UIAccent,\n                        outline: \"none\",\n                      },\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n          <Geographies geography={geodata}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  isSelected(geo) &&\n                  selectedCountries.map((country) => {\n                    return Object.keys(country.data)\n                      .filter((x) => country.data[x])\n                      .map((target) => {\n                        const country = geographies.find(\n                          (g) => g.properties.ISO_A2 === target\n                        );\n\n                        const originCoords = geo.geometry\n                          .coordinates[0][0][0][0]\n                          ? geo.geometry.coordinates[0][0]\n                          : geo.geometry.coordinates[0];\n\n                        const targetCoords = country?.geometry\n                          .coordinates[0][0][0][0]\n                          ? country?.geometry.coordinates[0][0]\n                          : country?.geometry.coordinates[0];\n\n                        if (!originCoords || !targetCoords) return false;\n\n                        const [max, min] = limits;\n\n                        const diff = max - min;\n\n                        const originName = geo.properties.ISO_A2;\n                        const targetName = country.properties.ISO_A2;\n                        const passengers = dataset[originName][targetName];\n                        const thickness = (passengers * 20) / diff;\n                        const lineWidth = \n                            transport === \"train\"\n                            ? thickness / 1.8\n                            : thickness;\n\n                        return (\n                          <Line\n                            key={target}\n                            from={getCentroid(originCoords)}\n                            to={getCentroid(targetCoords)}\n                            stroke=\"#A379C9\"\n                            opacity={0.8}\n                            strokeWidth={lineWidth < 0.5 ? 0.5 : lineWidth}\n                            strokeLinecap=\"round\"\n                          />\n                        );\n                      });\n                  })\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default MapChart;\n","import ReactTooltip from \"react-tooltip\";\nimport styled from 'styled-components';\n\nexport const ReactTooltipStyled = styled(ReactTooltip)`\n  &.type-dark.place-top {\n    background-color: rgba(0, 0, 0, 0.85);\n    padding: 0.3rem 1rem;\n    border-radius: 0;\n  }\n`;\n\nconst MapTooltip = ({ country, transport, year }) => {\n  const tootipContent = () => {\n    if (!country) return;\n    const name = country?.geo.properties.NAME;\n    if (!country.data) {\n      return (\n        <div>\n          <h3>{name}</h3>\n          <p>No data available</p>\n        </div>\n      );\n    }\n    const total = Object.values(country.data).reduce((acc, amount) => {\n      return (acc += amount);\n    }, 0);\n\n    const population = (country.geo.properties.POP_EST / 1000000).toFixed(2);\n    const passengers = (total / 1000000).toFixed(2);\n\n    return (\n      <div>\n        <h3>{name}</h3>\n        <p>\n          Population: <b>{population}M</b>\n        </p>\n        <p>\n          Total passengers leaving by {transport} in {year}:{\" \"}\n          <b>{passengers}M</b>\n        </p>\n      </div>\n    );\n  };\n\n  return <ReactTooltipStyled>{tootipContent()}</ReactTooltipStyled>;\n};\n\nexport default MapTooltip;\n","import { useState, useEffect } from \"react\";\nimport { FiChevronLeft } from \"react-icons/fi\";\n\nconst SidebarContainer = ({ open, onClose, sidebarContent, mainContent }) => {\n  const [opened, setOpened] = useState(false);\n\n  useEffect(() => {\n    setOpened(open);\n  }, [open]);\n\n  const close = () => {\n    setOpened(false);\n    onClose();\n  }\n\n  return (\n    <div className=\"sidebar-container\">\n      {opened && (\n        <div className=\"sidebar-left\">\n          <div className=\"close\" onClick={close}>\n            <FiChevronLeft />\n          </div>\n          {sidebarContent}\n        </div>\n      )}\n      <div className=\"sidebar-right\">\n        {mainContent}\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarContainer;\n","import { useMemo } from \"react\";\n\nconst useDatasetsLimits = (data) => {\n  const limits = useMemo(() => {\n    let max = -Infinity;\n    let min = Infinity;\n    Object.values(data).forEach((year) => {\n      return Object.values(year).forEach((country) => {\n        let all = 0;\n        Object.values(country).forEach((val) => {\n          if(val) all+=val;\n        })\n        if (all) {\n          max = Math.max(all, max);\n          min = Math.min(all, min);\n        }\n      }\n      );\n    });\n    return [max, min];\n  }, [data]);\n\n  return limits;\n};\n\nexport default useDatasetsLimits;\n","import theme from \"../../src/theme.json\";\n\nconst useColorSet = (transport) => {\n    // keyvalue with all the colors\n    let colorSet = {\n        background: \"black\",\n        UIAccent: \"black\",\n        disabled: \"black\"\n    }\n\n    const isInDarkMode = () => {\n        return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n\n    colorSet.background = isInDarkMode() ? theme.map.background.dark : theme.map.background.light;\n    colorSet.UIAccent = (transport == 'plane') ? theme.UI.accent.plane_trips : theme.UI.accent.train_trips;\n    colorSet.disabled = (() => {\n        if (transport == 'plane') {\n            if (isInDarkMode()) {\n                return theme.map.plane_trips.disabled_dark;\n            }\n            else {\n                return theme.map.plane_trips.disabled_light;\n            }\n        }\n        else {\n            if (isInDarkMode()) {\n                return theme.map.train_trips.disabled_dark;\n            }\n            else {\n                return theme.map.train_trips.disabled_light;\n            }\n        }\n    })();\n\n    return colorSet;\n}\n\nexport default useColorSet;\n","import { useState, useMemo, useEffect } from \"react\";\nimport chroma from \"chroma-js\";\n\nimport Navbar from \"./main/Navbar\";\nimport YearSelector from \"./main/YearSelector\";\nimport Sidebar from \"./sidebar/Sidebar\";\nimport About from \"./sidebar/About\";\nimport Header from \"./main/Header\";\nimport MapChart from \"./main/MapChart\";\nimport MapTooltip from \"./main/MapTooltip\";\nimport SidebarContainer from \"./SidebarContainer\";\nimport Autoplay from \"./main/Autoplay\";\nimport useDatasetsLimits from \"../hooks/useDatasetLimits\";\nimport useColorSet from \"../hooks/useColorSet\";\n\nimport theme from \"../../src/theme.json\";\n\nimport { TRANSPORT_OPTS, YEAR_OPTS } from \"../constants\";\n\nconst Main = ({ datasets }) => {\n  const [year, setYear] = useState(YEAR_OPTS[YEAR_OPTS.length - 1].value);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [transport, setTransport] = useState(\"plane\");\n  const [about, setAbout0] = useState(false);\n\n  const setAbout = (flag) => {\n    setAbout0(flag);\n  }\n\n  const dataset = useMemo(() => datasets[transport][year], [\n    datasets,\n    transport,\n    year,\n  ]);\n\n  const [max, min] = useDatasetsLimits(datasets[transport]);\n\n  const scale = useMemo(() => {\n    const rangeMin =\n      transport == \"plane\"\n        ? theme.map.plane_trips.min\n        : theme.map.train_trips.min;\n    const rangeMax =\n      transport == \"plane\"\n        ? theme.map.plane_trips.max\n        : theme.map.train_trips.max;\n    const range = [rangeMin, rangeMax];\n    return chroma.scale(range).domain([min, max]);\n  }, [max, min]);\n\n  const colorSet = useColorSet(transport);\n\n  useEffect(() => {\n    const countries = selectedCountries.map((country) => {\n      return {\n        ...country,\n        data: dataset[country.ISO],\n      };\n    });\n    setSelectedCountries(countries);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transport, year]);\n\n  return (\n    <SidebarContainer\n      open={about || selectedCountries.length > 0}\n      onClose={() => {\n        setSelectedCountries([]);\n        setAbout(false);\n      }}\n      sidebarContent={\n        about ? (\n          <About />\n        ) : (\n          <Sidebar\n            dataset={datasets[transport]}\n            countries={selectedCountries}\n            year={year}\n            transport={transport}\n            codes={datasets.codes}\n          />\n        )\n      }\n      mainContent={\n        <div className=\"main\">\n          {/* <Header /> */}\n          <Navbar\n            selected={transport}\n            setSelected={(method) => setTransport(method)}\n            options={TRANSPORT_OPTS}\n            colorSet={colorSet}\n            setAbout={setAbout}\n            about={about}\n          />\n          <MapChart\n            dataset={dataset}\n            colorSet={colorSet}\n            scale={scale}\n            transport={transport}\n            limits={[max, min]}\n            hoveredCountry={hoveredCountry}\n            selectedCountries={selectedCountries}\n            setHoveredCountry={setHoveredCountry}\n            setSelected={setSelectedCountries}\n          />\n          <MapTooltip\n            country={hoveredCountry}\n            transport={transport}\n            year={year}\n          />\n          <YearSelector\n            selected={year}\n            setSelected={setYear}\n            options={YEAR_OPTS}\n          />\n        </div>\n      }\n    />\n  );\n};\n\nexport default Main;\n","const Loading = () => {\n  return <h2 id=\"loadingText\">eurotransit</h2>;\n};\n\nexport default Loading;\n","\nconst Error = () => {\n  return (\n    <div>\n      <h2>eurotransit</h2>\n      <p>[eurotransit is not available right now. Please try again later]</p>\n    </div>\n  );\n};\n\nexport default Error;\n","import { DATASETS } from \"./constants\";\n\nexport const formatData = (dataset) => {\n  const [header, ...data] = dataset.content;\n  const meta = [\"origin\", \"destination\"];\n\n  // Locate origin and destination columns;\n  const origin = header.indexOf(meta[0]);\n  const destination = header.indexOf(meta[1]);\n\n  // Locate years\n  const years = header.filter((x) => !meta.includes(x));\n\n  // Create object with the available years;\n  const formated = years.reduce((acc, year) => {\n    acc[year] = {};\n    return acc;\n  }, {});\n\n  const parseVal = (v) => (isNaN(Number(v)) ? null : Number(v));\n\n  // Fill object;\n  Object.keys(formated).forEach((year) => {\n    const yearIdx = header.indexOf(year);\n\n    data.forEach((row) => {\n      if (row[destination] === undefined) return; // weird error in a ds;\n\n      if (row[origin] in formated[year]) {\n        formated[year][row[origin]][row[destination]] = parseVal(row[yearIdx]);\n      } else {\n        formated[year][row[origin]] = {\n          [row[destination]]: parseVal(row[yearIdx]),\n        };\n      }\n    });\n  });\n\n  return {\n    content: formated,\n    dataset: dataset.dataset,\n  };\n};\n\nconst formatCC = (codesDataset) => {\n  // eslint-disable-next-line no-unused-vars\n  const [_trash, ...data] = codesDataset.content;\n  const formatted = Object.values(data).reduce((acc, country) => {\n    acc[country[1]] = country[0];\n    return acc;\n  }, {});\n\n  return { ...codesDataset, content: formatted };\n};\n\nexport const mergeDatasets = (datasets) => {\n  const planes = datasets.find((ds) => ds.dataset === DATASETS.planes);\n  const trainBig = datasets.find((ds) => ds.dataset === DATASETS.train);\n  const train2020 = datasets.find((ds) => ds.dataset === DATASETS.train2020);\n  const codes = datasets.find((ds) => ds.dataset === DATASETS.codes);\n\n  return {\n    plane: planes.content,\n    train: { ...trainBig.content, ...train2020.content },\n    codes: codes.content,\n  };\n};\n\nexport const formatDataSets = (datasets) => {\n  const countryCodes = datasets.filter((x) => x.dataset === DATASETS.codes);\n  const rest = datasets.filter((x) => x.dataset !== DATASETS.codes);\n  const formated = rest.map(formatData);\n  const countryCodesFormatted = formatCC(...countryCodes);\n  const all = [countryCodesFormatted, ...formated];\n  const merged = mergeDatasets(all);\n\n  // FIXME: shitty fix to remove countries in trains that are not in planes\n  const countries = Object.keys(merged.plane[2020]);\n  Object.values(merged.train).forEach((year) => {\n    Object.keys(year).forEach((country) => {\n      if (!countries.includes(country)) {\n        delete year[country];\n      }\n    });\n  });\n  // -----------------------------------------------------------------------\n\n  return merged;\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { parse } from \"papaparse\";\n\nimport { BASE_URL, DATASETS } from \"../constants\";\nimport { formatDataSets } from \"../utils\";\n\nconst useDatasets = () => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const format = useCallback((ds) => formatDataSets(ds), []);\n\n  const handleError = (err) => {\n    setError(err);\n    console.error(\"Error retrieving the data:\", err);\n  };\n\n  useEffect(() => {\n    const promises = Object.values(DATASETS).map((dataset) =>\n      fetch(BASE_URL + dataset)\n        .then((response) => response.text())\n        .then(async (v) => {\n          const parsed = await parse(v);\n          return {\n            res: parsed,\n            name: dataset,\n          };\n        })\n        .catch(handleError)\n    );\n\n    Promise.all(promises)\n      .then((res) => {\n        const errors = res.filter((x) => x.res.errors.length > 0);\n        const isError = errors.length > 0;\n\n        if (isError) {\n          handleError(errors);\n        } else {\n          const data = res.map((x) => ({\n            content: x.res.data,\n            dataset: x.name,\n          }));\n          setTimeout(() => {\n            const formated = format(data);\n            setData(formated);\n          }, 1500);\n        }\n      })\n      .catch(handleError);\n  }, [format]);\n\n  return [data, error];\n};\n\nexport default useDatasets;\n","import Main from \"./components/Main\";\nimport Loading from \"./components/Loading\";\nimport Error from \"./components/Error\";\nimport useColorSet from \"./hooks/useColorSet\"\nimport useDatasets from \"./hooks/useDatasets\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [data, error] = useDatasets();\n  const bgMode = {\n    background: useColorSet(\"plane\").background\n  };\n  return (\n    <div className=\"App\" style={bgMode}>\n      {error ? <Error /> : data ? <Main datasets={data} /> : <Loading />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}