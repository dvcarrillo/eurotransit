{"version":3,"sources":["components/MapChart.js","components/Navbar.js","components/MapTooltip.js","constants.js","utils.js","components/Main.js","customHooks.js","components/Loading.js","components/Error.js","App.js","reportWebVitals.js","index.js"],"names":["MapChart","dataset","scale","setHoveredCountry","selectedCountries","setSelected","style","width","data-tip","projection","projectionConfig","rotate","geography","geodata","geographies","map","geo","data","amount","properties","ISO_A2","Object","values","reduce","acc","v","stroke","onClick","ISO","onMouseEnter","onMouseLeave","default","fill","opacity","outline","hover","pressed","rsmKey","Navbar","options","selected","position","setClass","useCallback","method","className","opt","value","label","MapTooltip","country","transport","year","name","NAME","total","population","POP_EST","toFixed","passengers","tootipContent","DATASETS","train2020","planes","train","TRANSPORT_OPTS","YEAR_OPTS","Array","from","length","_","i","formatData","content","header","meta","origin","indexOf","destination","formated","filter","x","includes","parseVal","isNaN","Number","keys","forEach","yearIdx","row","undefined","formatDataSets","datasets","find","ds","trainBig","plane","mergeDatasets","Main","useState","setYear","setSelectedCountries","hoveredCountry","setTransport","useMemo","max","min","Infinity","val","Math","chroma","domain","height","overflow","Loading","Error","App","setData","error","setError","format","handleError","err","console","useEffect","promises","fetch","then","response","text","a","parse","parsed","res","catch","Promise","all","errors","setTimeout","useDatasets","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9a26b5a.chunk.js","sourcesContent":["import React from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport geodata from \"../geo.json\";\n\nconst MapChart = ({ dataset, scale, selectedCountries, setHoveredCountry, setSelected }) => {\n  const getAcc = (data) => {\n    const amount = data\n      ? Object.values(data).reduce((acc, v) => acc + v || 0, 0)\n      : 0;\n    return amount;\n  };\n\n  return (\n    <div style={{ width: \"100vw\" }}>\n      <ComposableMap\n        data-tip=\"\"\n        projection=\"geoAzimuthalEqualArea\"\n        projectionConfig={{\n          rotate: [-20.0, -40.0, 0],\n          scale: 500,\n        }}\n      >\n        <ZoomableGroup>\n          <Geographies geography={geodata}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const amount = getAcc(dataset[geo.properties.ISO_A2]);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    stroke=\"#EAEAEC\"\n                    onClick={() => {\n                      setSelected([\n                        {\n                          geo,\n                          ISO: geo.properties.ISO_A2,\n                          data: dataset[geo.properties.ISO_A2],\n                        },\n                      ]);\n                    }}\n                    onMouseEnter = {() => {\n                      setHoveredCountry({\n                        geo,\n                        ISO: geo.properties.ISO_A2,\n                        data: dataset[geo.properties.ISO_A2],\n                      });\n                    }}\n                    onMouseLeave = {() => {\n                      setHoveredCountry(null);\n                    }}\n                    style={{\n                      default: {\n                        fill: scale(amount),\n                        opacity: 1,\n                        outline: \"none\",\n                      },\n                      hover: {\n                        fill: \"#0e755d\",\n                        outline: \"none\",\n                      },\n                      pressed: {\n                        fill: \"#E42\",\n                        outline: \"none\",\n                      },\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default MapChart;\n","import React, { useCallback } from \"react\";\n\nconst Navbar = ({ options, selected, setSelected, position }) => {\n  const setClass = useCallback(\n    (method) => {\n      return selected === method ? \"tab-active\" : \"tab-btn\";\n    },\n    [selected]\n  );\n\n  return (\n    <div className={`tab ${position}`}>\n      {options.map((opt) => (\n        <button\n          key={opt.value}\n          className={setClass(opt.value)}\n          onClick={() => setSelected(opt.value)}\n        >\n          {opt.label}\n        </button>\n      ))}\n      {/* <button className=\"tab-btn\">About</button> */}\n    </div>\n  );\n};\n\nexport default Navbar;\n","import ReactTooltip from \"react-tooltip\";\n\nconst MapTooltip = ({country, transport, year}) => {\n\n  const tootipContent = () => {\n    if (!country) return;\n    const name = country?.geo.properties.NAME;\n    if (!country.data) {\n      return (<div>\n        <h3>{name}</h3>\n        <p>No data available</p>\n        </div>)\n    }\n    const total = Object.values(country.data).reduce((acc, amount) => {\n      return (acc += amount);\n    }, 0);\n\n    const population = (country.geo.properties.POP_EST / 1000000).toFixed(2);\n    const passengers = (total / 1000000).toFixed(2);\n\n    return <div>\n      <h3>{name}</h3>\n      <p>Population: <b>{population}M</b></p>\n      <p>Total passengers leaving by {transport} in {year}: <b>{passengers}M</b></p>\n    </div>\n  };\n\n  return (<ReactTooltip>{tootipContent()}</ReactTooltip>)\n};\n\nexport default MapTooltip;\n","export const BASE_URL =\n  \"https://raw.githubusercontent.com/dvcarrillo/eurotransit/dev/datasets/\";\n\nexport const DATASETS = {\n  train2020: \"rail_passengers_2020_cleaned.csv\",\n  planes: \"cleaned_planes.csv\",\n  train: \"rail_trips_cleaned.csv\",\n  // \"country_codes.csv\",\n};\n\nexport const TRANSPORT_OPTS = [\n  { value: \"plane\", label: \"Flight\" },\n  { value: \"train\", label: \"Train\" },\n];\n\nexport const YEAR_OPTS = Array.from(\n  { length: 2020 - 2004 + 1 },\n  (_, i) => 2004 + i\n).map((year) => ({\n  value: year,\n  label: year,\n}));\n","import { DATASETS } from \"./constants\";\n\nexport const formatData = (dataset) => {\n  const [header, ...data] = dataset.content;\n  const meta = [\"origin\", \"destination\"];\n\n  // Locate origin and destination columns;\n  const origin = header.indexOf(meta[0]);\n  const destination = header.indexOf(meta[1]);\n\n  // Locate years\n  const years = header.filter((x) => !meta.includes(x));\n\n  // Create object with the available years;\n  const formated = years.reduce((acc, year) => {\n    acc[year] = {};\n    return acc;\n  }, {});\n\n  const parseVal = (v) => (isNaN(Number(v)) ? null : Number(v));\n\n  // Fill object;\n  Object.keys(formated).forEach((year) => {\n    const yearIdx = header.indexOf(year);\n\n    data.forEach((row) => {\n      if (row[destination] === undefined) return; // weird error in a ds;\n\n      if (row[origin] in formated[year]) {\n        formated[year][row[origin]][row[destination]] = parseVal(row[yearIdx]);\n      } else {\n        formated[year][row[origin]] = {\n          [row[destination]]: parseVal(row[yearIdx]),\n        };\n      }\n    });\n  });\n\n  return {\n    content: formated,\n    dataset: dataset.dataset,\n  };\n};\n\nexport const mergeDatasets = (datasets) => {\n  const planes = datasets.find((ds) => ds.dataset === DATASETS.planes);\n  const trainBig = datasets.find((ds) => ds.dataset === DATASETS.train);\n  const train2020 = datasets.find((ds) => ds.dataset === DATASETS.train2020);\n\n  return {\n    plane: planes.content,\n    train: { ...trainBig.content, ...train2020.content },\n  };\n};\n\nexport const formatDataSets = (datasets) => {\n  const formated = datasets.map(formatData);\n  const merged = mergeDatasets(formated);\n  return merged;\n};","import { useState, useMemo } from \"react\";\nimport chroma from \"chroma-js\";\n\nimport MapChart from \"./MapChart\";\nimport Navbar from \"./Navbar\";\nimport MapTooltip from \"./MapTooltip\";\nimport { useDatasetsLimits } from \"../customHooks\";\n\nimport { TRANSPORT_OPTS, YEAR_OPTS } from \"../constants\";\n\nconst Main = ({ datasets }) => {\n  const [year, setYear] = useState(2020);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [transport, setTransport] = useState(\"plane\");\n\n  const dataset = useMemo(() => datasets[transport][year], [\n    datasets,\n    transport,\n    year,\n  ]);\n\n  const [max, min] = useDatasetsLimits(datasets[transport]);\n\n  const scale = useMemo(() => {\n    const range = [\"lightgrey\", \"#11987F\"];\n    return chroma.scale(range).domain([min, max]);\n  }, [max, min]);\n\n  return (\n    <div style={{ height: \"100vh\", overflow: \"hidden\" }}>\n      <Navbar\n        selected={transport}\n        setSelected={setTransport}\n        options={TRANSPORT_OPTS}\n        position=\"top\"\n      />\n      <Navbar\n        selected={year}\n        setSelected={setYear}\n        options={YEAR_OPTS}\n        position=\"bottom\"\n      />\n      <MapChart\n        dataset={dataset}\n        scale={scale}\n        hoveredCountry={hoveredCountry}\n        selectedCountries={selectedCountries}\n        setHoveredCountry={setHoveredCountry}\n        setSelected={setSelectedCountries}\n      />\n      <MapTooltip country={hoveredCountry} transport={transport} year={year} />\n    </div>\n  );\n};\n\nexport default Main;\n","import { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { parse } from \"papaparse\";\n\nimport { BASE_URL, DATASETS } from \"./constants\";\nimport { formatDataSets } from \"./utils\";\n\nexport const useDatasets = () => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const format = useCallback((ds) => formatDataSets(ds), []);\n\n  const handleError = (err) => {\n    setError(err);\n    console.error(\"Error retrieving the data:\", err);\n  };\n\n  useEffect(() => {\n    const promises = Object.values(DATASETS).map((dataset) =>\n      fetch(BASE_URL + dataset)\n        .then((response) => response.text())\n        .then(async (v) => {\n          const parsed = await parse(v);\n          return {\n            res: parsed,\n            name: dataset,\n          };\n        })\n        .catch(handleError)\n    );\n\n    Promise.all(promises)\n      .then((res) => {\n        const errors = res.filter((x) => x.res.errors.length > 0);\n        const isError = errors.length > 0;\n\n        if (isError) {\n          handleError(errors);\n        } else {\n          const data = res.map((x) => ({\n            content: x.res.data,\n            dataset: x.name,\n          }));\n          setTimeout(() => {\n            const formated = format(data);\n            setData(formated);\n          }, 1500);\n        }\n      })\n      .catch(handleError);\n  }, [format]);\n\n  return [data, error];\n};\n\nexport const useDatasetsLimits = (data) => {\n  const limits = useMemo(() => {\n    let max = -Infinity;\n    let min = Infinity;\n    Object.values(data).forEach((year) => {\n        return Object.values(year).forEach((country) =>\n          Object.values(country).forEach((val) => {\n            if (val) {\n              max = Math.max(val, max);\n              min = Math.min(val, min);\n            }\n          })\n        );\n      });\n    return [max, min];\n  }, [data]);\n\n  return limits;\n};\n","const Loading = () => {\n  return(\n    <h2>eurotransit</h2>\n  )\n}\n\nexport default Loading;\n","const Error = () => {\n  return (\n    <div>\n      <h2>eurotransit</h2>\n      <p>[eurotransit is not available right now. Please try again later]</p>\n    </div>\n  );\n};\n\nexport default Error;\n","import React from \"react\";\n\nimport Main from \"./components/Main\";\nimport Loading from \"./components/Loading\";\nimport Error from \"./components/Error\";\n\nimport { useDatasets } from './customHooks';\n\nimport \"./App.css\";\n\nfunction App() {\n  const [data, error] = useDatasets();\n\n  return (\n    <div className=\"App\">\n      {error ? <Error /> : data ? <Main datasets={data} /> : <Loading />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}